#!/bin/sh
### Bedrock Linux 1.0beta1 Hawkey
### bedrocklinux-installer

# This script can be used to compile and install major components of a Bedrock
# Linux system.

# Abort if anything returns non-zero unexpectedly
set -e
# Abort if accessing unassigned variable
set -u

# ------------------------------------------------------------------------------
# - support functions                                                          -
# ------------------------------------------------------------------------------

# prints help
print_help() {
cat <<EOF
Usage: bedrocklinux-installer [COMMAND] [COMPONENTS]

This script can be used to setup much of a Bedrock Linux system.  To install an
entire Bedrock Linux system (as opposed to compiling/updating one component)
Move/clone/untar this script and the software bundled with it into the
directory you would like to install Bedrock Linux, then run:

    cd <install directory>
    ./bedrocklinux-installer source all
    ./bedrocklinux-installer make all
    sudo ./bedrocklinux-installer install all

Once everything is built as you'd like, to remove everything not necessary
to run the system (e.g. source code and this script) with:

    ./bedrocklinux-installer hard-clean all

This script can be used to compile individual components of the system as well.
For example, if there is a fancy new busybox you would like to try out, you can
compile it by simply placing its source in the src directory and running:

    ./bedrocklinux-installer source devstack
    ./bedrocklinux-installer make busybox

COMMANDs:
    help        Prints this help
    source      Attempts to automatically acquire a known-good commit of the
                source code required for the specified component.  Note that
                this is not updated frequently and there may be important
                security updates - it is better to manually find the newest
                version of the source code than rely on this.  Although if it
                is to new it could have broken something.
    make        Compile the component.  Will automatically attempt to compile
                the specified component's dependencies and install required
                parts of the devstack (into a temporary location, not the host
                system)
    install     Install the component.
    clean       Remove temporary files
    hard-clean  Remove everything that is not part of the installed system -
                including this script!

COMPONENTS:
    all         The entire (core) Bedrock Linux system - all other options.
    devstack    headers, musl, fuse and cap
    libbedrock  A library for other Bedrock Linux utilities.
    brc         brc (BedRock Change local Contexts)
    brp         brp (BedRock Path)
    bru         bru (BedRock Union filesystem)
    busybox     the swiss army knife of embedded linux
    headers     linux headers
    musl        the musl c library
    fuse        the fuse library
    cap         linux capabilities library
    directories creates directories of core Bedrock Linux system
    permissions set permissions on the install directory

EOF
	exit
}

# Announce something high-level that may have subcategories
announce_high() {
	echo "$1" | tee -a $log
}

# Announce something low-level that will not have subcategories whose
# completion will be indicated by check()
announce_low() {
	echo -n "  $1... " | tee -a $log
}

# Some error condition happened and the process is aborting.  If there is an
# argument, print that as the error message; otherwise, direct the user to the
# log file.
abort() {
	echo "ERROR:" | tee -a $log
	if [ -n "${1:-}" ]
	then
		echo "$@" | tee -a $log
	else
		echo "See log at"
		echo "$log"
	fi
	exit 1
}

# Check if the last operation succeeded based on return code.  If so, close
# announce_low(); otherwise, abort.
check() {
	if [ $? -ne 0 ]
	then
		abort
	elif [ "${1:-}" = "/bin/false" ]
	then
		abort
	else
		echo "done" | tee -a $log
	fi
}

# Run a shell command and log it.
runcmd() {
	echo ""       >>$log 2>&1
	echo "\`$@\`" >>$log 2>&1
	eval "$@"     >>$log 2>&1
}

# Copy or untar source for $component to temporary directory in preparation for use.
# Leaves original copy pristine.
copy_untar() {
	announce_low "Preparing $component source"
	runcmd "mkdir -p $src/$component" || abort
	if ls "$install_root"/src/*"$component"*tar* >/dev/null 2>&1
	then
		runcmd "cd $src/$component/"
		runcmd "tar xf $install_root/src/*$component*tar*"
	elif ls "$install_root"/src/*"$component"* >/dev/null 2>&1
	then
		runcmd "cp -r $install_root/src/*$component* $src/$component/"
	else
		[ "$component" = "linux" ] && component="headers"
		abort "Could not find source for $component.  Try running \`./bedrocklinux-installer source $component\`"
	fi
	check
}

# Run the configuration script for $component
configure() {
	announce_low "Configuring $component"
	runcmd "cd $src/$component/"
	runcmd "cd $(ls)"
	runcmd "./configure $@"
	check
}

# Compile $component
compile() {
	announce_low "Compiling $component"
	runcmd "cd $src/$component/"
	runcmd "cd $(ls)"
	RESULT=/bin/true
	if [ -n "${JOBS:-}" ]
	then
		runcmd "make -j$JOBS $@" || RESULT=/bin/false
	else
		runcmd "make $@" || RESULT=/bin/false
	fi
	check $RESULT
}

# Run make install for $component
install() {
	announce_low "Installing $component"
	runcmd "cd $src/$component/"
	runcmd "cd $(ls)"
	runcmd "make install $@"
	check
}

wget_source() {
	announce_high "Getting source for $component"
	if ls "$install_root"/src/*"$component"* >/dev/null 2>&1
	then
		announce_low "Removing previous run"
		rm -rf "$install_root"/src/*"$component"*
		check
	fi
	cd "$install_root/src"
	announce_low "Downloading $component source"
	# get the latest version that has been tested against the other components.
	runcmd 'wget "'$1'"'
	check
}

busybox_set_option() {
	if grep -q "^$1=" .config
	then
		runcmd "sed 's/^$1=./$1=$2/' .config > .config-new"
		runcmd "mv .config-new .config"
	elif grep -q "^# $1 is not set" .config
	then
		runcmd "sed 's/^# $1 is not set/$1=$2/' .config > .config-new"
		runcmd "mv .config-new .config"
	else
		runcmd "echo '$1=$2' >> .config"
	fi
}


# ------------------------------------------------------------------------------
# - functions to acquire source                                                -
# ------------------------------------------------------------------------------

source_libbedrock() {
	component=libbedrock
	announce_high "Getting source for $component"
	announce_low "$component's source should be bundled, nothing to do"
	check
}

source_brc() {
	component=brc
	announce_high "Getting source for $component"
	announce_low "$component's source should be bundled, nothing to do"
	check
}

source_brp() {
	component=brp
	announce_high "Getting source for $component"
	announce_low "$component's source should be bundled, nothing to do"
	check
}

source_bru() {
	component=bru
	announce_high "Getting source for $component"
	announce_low "$component's source should be bundled, nothing to do"
	check
}

source_busybox() {
	component=busybox
	wget_source "http://www.busybox.net/downloads/busybox-1.22.1.tar.bz2"
}

source_headers() {
	component=headers
	announce_high "Getting source for $component"
	# if we use "linux" as the component name, people get confused why we're
	# building a kernel.  Thus, we use "headers" and then hard-code the
	# relevant parts here.
	if ls "$install_root"/src/*linux* >/dev/null 2>&1
	then
		announce_low "Removing previous run"
		rm -rf "$install_root"/src/*linux*
		check
	fi
	# get the latest stable kernel
	cd "$install_root/src/"
	announce_low "Grabbing latest stable Linux kernel"
	# runcmd / logging doesn't seem to git's fancy relevant output here.  This
	# can take a while, and if the user doens't see something happening he or
	# she may assume this is broken.  Thus, for this, we're skipping the usual
	# runcmd wrapper.
	echo ""
	git clone --depth 1 git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
	check
}

source_musl() {
	component=musl
	wget_source "http://www.musl-libc.org/releases/musl-1.0.3.tar.gz"
}

source_fuse() {
	component=fuse
	announce_high "Getting source for $component"
	# get the latest version that has been tested against the other components.
	if ls "$install_root"/src/*"$component"* >/dev/null 2>&1
	then
		announce_low "Removing previous run"
		rm -rf "$install_root"/src/*$component*
		check
	fi
	mkdir -p "$install_root/src/$component"
	cd "$install_root/src/$component"
	announce_low "Downloading $component source"
	# There are no stable/release commits which include patches required to
	# compile against musl.  Hence, we have to use a bleeding-edge commit.
	# This is the latest one which has been successfully used to compile the
	# brp and bru.
	runcmd 'git archive --format=tar --remote="git://git.code.sf.net/p/fuse/fuse" "dd432032db34c2ca22570af5ac6794822ef4c877" | tar xf -'
	check
}

source_cap() {
	component=cap
	wget_source "https://www.kernel.org/pub/linux/libs/security/linux-privs/libcap2/libcap-2.24.tar.gz"
}

source_directories() {
	component=directories
	announce_high "Getting source for $component"
	announce_low "$component is built into this script, nothing to get"
	check
}
source_permissions() {
	component=permissions
	announce_high "Getting source for $component"
	announce_low "$component is built into this script, nothing to get"
	check
}

# ------------------------------------------------------------------------------
# - functions to make components                                               -
# ------------------------------------------------------------------------------
#
# Each function will compile/prepare some item.  They will each set a variable
# upon completing the component so, if called again it will not have to run
# again.  This can also be set externally to skip steps when debugging.  They
# will automatically call functions to make any of their dependencies.

make_headers() {
	# check if already done
	if [ -n "${MAKE_HEADERS:-}" ]; then return; fi
	# dependencies:
	# (none)

	component="linux"
	announce_high "Making headers"
	copy_untar
	compile "headers_install INSTALL_HDR_PATH=$dev"

	MAKE_HEADERS="1"
}

make_musl() {
	# check if already done
	if [ -n "${MAKE_MUSL:-}" ]; then return; fi
	# dependencies:
	make_headers

	component="musl"
	announce_high "Making $component"
	copy_untar
	configure --prefix=$dev --disable-shared --enable-static
	compile
	install # installing in /tmp, won't keep in actual install
	# this is a minor fix to keep some things happy
	ln -s $dev/lib $dev/lib64

	MAKE_MUSL="1"
}

make_fuse() {
	# check if already done
	if [ -n "${MAKE_FUSE:-}" ]; then return; fi
	# dependencies:
	make_musl

	component="fuse"
	announce_high "Making $component"
	copy_untar
	announce_low "Making configure script"
	runcmd "cd $src/$component/"
	runcmd "cd $(ls)"
	runcmd "./makeconf.sh"
	check
	configure --prefix=$dev --disable-shared --enable-static --disable-util --disable-example
	compile "CC=$cc"
	install # installing in /tmp, won't keep in actual install

	MAKE_FUSE="1"
}

make_cap() {
	# check if already done
	if [ -n "${MAKE_CAP:-}" ]; then return; fi
	# dependencies:
	make_musl

	component="cap"
	announce_high "Making $component"
	copy_untar
	# NOT making with musl-gcc since we did not build libattr, so we can get it
	# from the system.
	# TODO: include libattr in this script.
	compile

	# installing in /tmp, won't keep in actual install unless explicitly
	# requested with ./bedrocklinux-installer install
	install DESTDIR=$dev prefix=/ RAISE_SETFCAP=NO

	MAKE_CAP="1"
}

make_libbedrock() {
	# check if already done
	if [ -n "${MAKE_LIBBEDROCK:-}" ]; then return; fi
	# dependencies:
	make_musl

	component="libbedrock"
	announce_high "Making $component"
	copy_untar
	compile "CC=$cc"
	# installing in /tmp, won't keep in actual install unless explicitly
	# requested with ./bedrocklinux-installer install
	install prefix=$dev

	MAKE_LIBBEDROCK="1"
}

make_brc() {
	# check if already done
	if [ -n "${MAKE_BRC:-}" ]; then return; fi
	# dependencies:
	make_musl
	make_cap
	make_libbedrock

	component="brc"
	announce_high "Making $component"
	copy_untar
	compile "CC=$cc"

	MAKE_BRC="1"
}

make_brp() {
	# check if already done
	if [ -n "${MAKE_BRP:-}" ]; then return; fi
	# dependencies:
	make_musl
	make_fuse
	make_libbedrock

	component="brp"
	announce_high "Making $component"
	copy_untar
	compile "CC=$cc"

	MAKE_BRP="1"
}

make_bru() {
	# check if already done
	if [ -n "${MAKE_BRP:-}" ]; then return; fi
	# dependencies:
	make_musl
	make_fuse

	component="bru"
	announce_high "Making $component"
	copy_untar
	compile "CC=$cc"

	MAKE_BRU="1"
}

make_busybox() {
	if [ -n "${MAKE_BUSYBOX:-}" ]; then return; fi
	# dependencies:
	make_musl
	make_headers

	component="busybox"
	announce_high "Making $component"
	copy_untar
	announce_low "Making config"
	runcmd 'cd $src/$component/'
	runcmd 'cd $(ls)'
	# use busybox's default config
	runcmd 'make defconfig'
	# ensure static
	busybox_set_option "CONFIG_STATIC" "y"
	# full modutils
	busybox_set_option "CONFIG_MODPROBE_SMALL" "n"
	busybox_set_option "CONFIG_FEATURE_MODPROBE_SMALL_OPTIONS_ON_CMDLINE" "n"
	busybox_set_option "CONFIG_FEATURE_MODPROBE_SMALL_CHECK_ALREADY_LOADED" "n"
	busybox_set_option "CONFIG_INSMOD" "y"
	busybox_set_option "CONFIG_RMMOD" "y"
	busybox_set_option "CONFIG_LSMOD" "y"
	busybox_set_option "CONFIG_FEATURE_LSMOD_PRETTY_2_6_OUTPUT" "y"
	busybox_set_option "CONFIG_MODPROBE" "y"
	busybox_set_option "CONFIG_FEATURE_MODPROBE_BLACKLIST" "y"
	busybox_set_option "CONFIG_DEPMOD" "y"
	busybox_set_option "CONFIG_FEATURE_CHECK_TAINTED_MODULE" "y"
	busybox_set_option "CONFIG_FEATURE_MODUTILS_ALIAS" "y"
	busybox_set_option "CONFIG_FEATURE_MODUTILS_SYMBOLS" "y"
	# udhcp client
	busybox_set_option "CONFIG_UDHCPC6" "y"
	# remove items which make compiling difficult. If the core doesn't need
	# them, better to skip than to worry about patching
	busybox_set_option "CONFIG_INETD" "n"
	check
	# if_ether.h needs a small patch to play with musl
	announce_low "Fixing miscellaneous busybox-musl issues"
	runcmd "cd $dev/include/netinet/"
	runcmd "awk '{p=1}/^struct ethhdr/,/^}/{print \"//\"\$0; p=0}p==1' if_ether.h > if_ether.h.new"
	runcmd "mv if_ether.h.new if_ether.h"
	# busybox looks for some things in net/ not linux/, but we only have it in linux/
	#runcmd "cp $dev/include/linux/if_slip.h $dev/include/net/"
	check
	announce_low "Cleaning"
	runcmd 'cd $src/$component/'
	runcmd 'cd $(ls)'
	runcmd 'make clean'
	check
	compile "CC=$cc"

	MAKE_BUSYBOX="1"
}


# ------------------------------------------------------------------------------
# - functions to install components                                            -
# ------------------------------------------------------------------------------
#
# Each function will install some item.  They will each set a variable upon
# completing the component so, if called again it will not have to run again.
# This can also be set externally to skip steps when debugging.  They will
# automatically call functions to make any of their dependencies.

install_directories() {
	# check if already done
	if [ -n "${INSTALL_DIRECTORIES:-}" ]; then return; fi
	# dependencies:
	# (none)

	announce_high "Making directory tree"
	RESULT=/bin/true

	for dir in                          \
		bedrock                         \
			bedrock/bin                 \
			bedrock/brpath              \
			bedrock/clients             \
				bedrock/clients/bedrock \
			bedrock/etc                 \
			bedrock/sbin                \
		bin                             \
		boot                            \
		dev                             \
		etc                             \
			etc/init.d                  \
		home                            \
		lib                             \
			lib/firmware                \
			lib/modules                 \
		mnt                             \
		opt                             \
		proc                            \
		root                            \
		run                             \
		sbin                            \
		src                             \
			src/brc                     \
			src/brp                     \
			src/bru                     \
			src/libbedrock              \
		sys                             \
		tmp                             \
		usr                             \
			usr/bin                     \
			usr/sbin                    \
		var                             \
			var/lib                     \
			var/run                     \
				var/lib/urandom         \
			var/tmp
	do
		runcmd "mkdir -p $dir" || RETURN=/bin/false
	done
	check $RESULT

	INSTALL_DIRECTORIES=1
}

# git will not track all permissions, explicitly set here.
install_permissions() {
	# check if already done
	if [ -n "$INSTALL_PERMISSIONS" ]; then return; fi
	# dependencies:
	install_directories

	announce_low "Setting permissions"
	RESULT=/bin/true

	# normal directories
	for dir in                          \
		bedrock                         \
			bedrock/bin                 \
			bedrock/brpath              \
			bedrock/clients             \
				bedrock/clients/bedrock \
			bedrock/etc                 \
			bedrock/sbin                \
		bin                             \
		boot                            \
		dev                             \
		etc                             \
			etc/init.d                  \
		home                            \
		lib                             \
			lib/firmware                \
			lib/modules                 \
		mnt                             \
		opt                             \
		proc                            \
		root                            \
		run                             \
		sbin                            \
		src                             \
			src/brc                     \
			src/brp                     \
			src/bru                     \
			src/libbedrock              \
		sys                             \
		usr                             \
			usr/bin                     \
			usr/sbin                    \
		var                             \
			var/lib                     \
				var/lib/urandom
	do
		runcmd "chmod 0755 $dir"      || RESULT=/bin/false
		runcmd "chown root:root $dir" || RESULT=/bin/false
	done

	# directories for temporary files
	for tmpdir in tmp var/tmp
	do
		runcmd "chmod 1777 $tmpdir"      || RESULT=/bin/false
		runcmd "chown root:root $tmpdir" || RESULT=/bin/false
	done

	# normal files
	for file in                            \
		bedrock/etc/brp.conf               \
		bedrock/etc/clients.d/bedrock.conf \
		bedrock/etc/frameworks.d/default   \
		bedrock/etc/rc.conf                \
		etc/fstab                          \
		etc/group                          \
		etc/hostname                       \
		etc/hosts                          \
		etc/inittab                        \
		etc/issue                          \
		etc/lsb-release                    \
		etc/passwd                         \
		etc/profile                        \
		etc/rc.local                       \
		etc/shells
	do
		runcmd "chmod 644 $file"       || RESULT=/bin/false
		runcmd "chown root:root $file" || RESULT=/bin/false
	done

	# secure files
	for file in etc/shadow etc/sudoers
	do
		runcmd "chmod 600 $file"       || RESULT=/bin/false
		runcmd "chown root:root $file" || RESULT=/bin/false
	done

	# executable files
	for file in                \
		bedrock/bin/bri        \
		bedrock/bin/brl        \
		bedrock/bin/brsh       \
		bedrock/bin/brw        \
		bedrock/sbin/brp       \
		bedrock/sbin/brs       \
		bedrock/sbin/halt      \
		bedrock/sbin/poweroff  \
		bedrock/sbin/reboot    \
		bedrock/sbin/shutdown  \
		etc/init.d/rcK         \
		etc/init.d/rcK.clients \
		etc/init.d/rcS         \
		etc/init.d/rcS.clients \
		etc/init.d/rcS.udev
	do
		runcmd "chmod 755 $file"       || RESULT=/bin/false
		runcmd "chown root:root $file" || RESULT=/bin/false
	done

	check $RESULT
	INSTALL_PERMISSIONS=1
}

install_headers() {
	# check if already done
	if [ -n "${INSTALL_HEADERS:-}" ]; then return; fi
	# dependencies:
	make_headers

	component="headers"
	announce_high "Installing $component"
	announce_low "part of temporary development stack, not actually installing"
	check
	INSTALL_HEADERS="1"
}

install_musl() {
	# check if already done
	if [ -n "${INSTALL_MUSL:-}" ]; then return; fi
	# dependencies:
	make_musl

	component="musl"
	announce_high "Installing $component"
	announce_low "part of temporary development stack, not actually installing"
	check
	INSTALL_MUSL="1"
}

install_fuse() {
	# check if already done
	if [ -n "${INSTALL_FUSE:-}" ]; then return; fi
	# dependencies:
	make_fuse

	component="fuse"
	announce_high "Installing $component"
	announce_low "part of temporary development stack, not actually installing"
	check
	INTSALL_FUSE="1"
}

install_cap() {
	# check if already done
	if [ -n "${INSTALL_CAP:-}" ]; then return; fi
	# dependencies:
	make_cap
	install_directories
	install_permissions

	component="cap"
	announce_high "Installing $component"
	runcmd "cd $src/$component/"
	runcmd "cd $(ls)"
	RESULT=/bin/true
	runcmd "cp ./progs/setcap $install_root/bedrock/sbin/setcap" || RESULT=/bin/false
	runcmd "chmod 755 $install_root/bedrock/sbin/setcap"         || RESULT=/bin/false
	check "${RESULT}"
	INTSALL_CAP="1"
}

install_libbedrock() {
	# check if already done
	if [ -n "${INSTALL_LIBBEDROCK:-}" ]; then return; fi
	# dependencies:
	make_libbedrock

	component="libbedrock"
	announce_high "Installing $component"
	announce_low "part of temporary development stack, not actually installing"
	check
	INTSALL_LIBBEDROCK="1"
}

install_brc() {
	# check if already done
	if [ -n "${INSTALL_BRC:-}" ]; then return; fi
	# dependencies:
	install_directories
	install_permissions
	install_cap
	make_brc

	component="brc"
	announce_high "Installing $component"
	announce_low "Putting into place"
	install prefix=$install_root/bedrock/
	check
	# set capabilities
	announce_low "Setting capabilities"
	RESULT=/bin/true
	runcmd "$install_root/bedrock/sbin/setcap cap_sys_chroot=ep $install_root/bedrock/bin/brc" || RESULT=/bin/false
	check $RESULT
	INTSALL_BRC="1"
}

install_brp() {
	# check if already done
	if [ -n "${INSTALL_BRP:-}" ]; then return; fi
	# dependencies:
	install_directories
	install_permissions
	make_brp

	component="brp"
	announce_high "Installing $component"
	install prefix=$install_root/bedrock/
	check
	INTSALL_BRP="1"
}

install_bru() {
	# check if already done
	if [ -n "${INSTALL_BRU:-}" ]; then return; fi
	# dependencies:
	install_directories
	install_permissions
	make_bru

	component="bru"
	announce_high "Installing $component"
	install prefix=$install_root/bedrock/
	check
	INTSALL_BRU="1"
}

install_busybox() {
	# check if already done
	if [ -n "${INSTALL_BUSYBOX:-}" ]; then return; fi
	# dependencies:
	install_directories
	install_permissions

	announce_low "Installing busybox"
	RESULT=/bin/true
	component="busybox"
	runcmd "cd $src/$component/"
	runcmd "cd $(ls)"
	# there have been problems with the stripped version of busybox being
	# broken when built with certain versions of some tools; unstripped is
	# likely to reliably work (at the cost of extra size).
	runcmd "cp ./busybox_unstripped $install_root/bedrock/bin/busybox" || RESULT=/bin/false
	runcmd "chmod 755 $install_root/bedrock/bin/busybox" || RESULT=/bin/false
	runcmd "chmod +s $install_root/bedrock/bin/busybox" || RESULT=/bin/false
	runcmd "cp ./examples/mdev_fat.conf $install_root/etc/mdev.conf" || RESULT=/bin/false
	runcmd "chmod 644 $install_root/etc/mdev.conf" || RESULT=/bin/false
	runcmd "chroot $install_root /bedrock/bin/busybox --install" || RESULT=/bin/false
	runcmd "chroot $install_root /bedrock/bin/busybox ln -s /bedrock/bin/busybox /bin" || RESULT=/bin/false
	check $RESULT

	INSTALL_BUSYBOX=1
}

# ------------------------------------------------------------------------------
# - execution starts here                                                      -
# ------------------------------------------------------------------------------

install_root="$(pwd)"
if [ -z "${BEDROCKLINUX_INSTALLER_TMP:-}" ]
then
	tmp="/tmp/bedrocklinux-installer-tmp"
else
	tmp="$BEDROCKLINUX_INSTALLER_TMP"
fi
src="$tmp/src"
dev="$tmp/dev"
cc="$tmp/dev/bin/musl-gcc"
log="$tmp/log"
orig_args="$@"

echo "---------------------------------------"
echo "Bedrock Linux 1.0beta1 Hawkey installer"
echo "---------------------------------------"
echo ""

if [ -z "${1:-}" ] || [ -z "${2:-}" ]
then
	print_help
fi

if [ -e "$tmp" ] && [ -z "${KEEP_OLD:-}" ]
then
	echo -n "Removing previous run... "
	rm -rf $tmp
	echo "done"
fi
echo -n "Making temporary directory structure... "
mkdir -p $tmp
mkdir -p $src
mkdir -p $dev
touch $log
echo "done"

announce_high "Starting logging at"
echo "$log"
echo "(consider tail -f)"
echo ""

case "$1" in
	"source")
		case "$2" in
			"all")
				source_brc         # stub, source is bundled
				source_brp         # stub, source is bundled
				source_bru         # stub, source is bundled
				source_cap
				source_directories # stub, no source to get
				source_fuse
				source_headers
				source_libbedrock  # stub, source is bundled
				source_musl
				source_permissions # stub, no source to get
				;;
			"devstack")
				source_cap
				source_directories # stub, no source to get
				source_fuse
				source_headers
				source_musl
				;;
			"libbedrock")
				source_libbedrock;; # stub, source is bundled
			"brc")
				source_brc;; # stub, source is bundled
			"brp")
				source_brp;; # stub, source is bundled
			"bru")
				source_bru;; # stub, source is bundled
			"busybox")
				source_busybox;;
			"headers")
				source_headers;;
			"musl")
				source_musl;;
			"fuse")
				source_fuse;;
			"cap")
				source_cap;;
			"directories")
				source_directories;; # stub, no source to get
			"permissions")
				source_permissions;; # stub, no source to get
			*)
				echo "\"$2\" is not a valid component, see \`./bedrocklinux-installer help\`"
				exit 1;;
		esac;;
	"make")
		case "$2" in
			"all")
				make_brc
				make_brp
				make_bru
				make_cap
				make_directories
				make_fuse
				make_headers
				make_libbedrock
				make_musl
				make_permissions
				;;
			"devstack")
				make_cap
				make_fuse
				make_headers
				make_libbedrock
				make_musl
				;;
			"libbedrock")
				make_libbedrock;;
			"brc")
				make_brc;;
			"brp")
				make_brp;;
			"bru")
				make_bru;;
			"busybox")
				make_busybox;;
			"headers")
				make_headers;;
			"musl")
				make_musl;;
			"fuse")
				make_fuse;;
			"cap")
				make_cap;;
			"directories")
				make_directories;;
			"permissions")
				make_permissions;;
			*)
				echo "\"$2\" is not a valid component, see \`./bedrocklinux-installer help\`"
				exit 1;;
		esac
cat <<EOF
Done making $2.  To install $2, run:
    ./bedrocklinux-installer install $2
EOF
		;;

	"install")
		case "$2" in
			"all")
				install_brc
				install_brp
				install_bru
				install_cap
				install_directories
				install_fuse
				install_headers
				install_libbedrock
				install_musl
				install_permissions
cat <<EOF
Done installing all requested items.
You will still need to install:
- a kernel (and initrd, modules, etc)
- a bootloader
- clients
and to configure the system.

If you'd like, you can remove files that are not necessary to run the system
with:

./bedrocklinux-installer hard-clean.

Enjoy!
EOF
				;;
			"devstack")
				install_cap
				install_fuse
				install_headers
				install_libbedrock
				install_musl
				;;
			"libbedrock")
				install_libbedrock;;
			"brc")
				install_brc;;
			"brp")
				install_brp;;
			"bru")
				install_bru;;
			"busybox")
				install_busybox;;
			"headers")
				install_headers;;
			"musl")
				install_musl;;
			"fuse")
				install_fuse;;
			"cap")
				install_cap;;
			"directories")
				install_directories;;
			"permissions")
				install_permissions;;
			*)
				echo "\"$2\" is not a valid component, see \`./bedrocklinux-installer help\`"
				exit 1;;
		esac;;
	"help"|"h"|"--help"|"-h"|"")
		print_help;;
	*)
		echo "\"$1\" is not a valid command, see \`./bedrocklinux-installer help\`"
		exit 1
		;;
esac
