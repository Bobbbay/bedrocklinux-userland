### /bedrock/etc/clients.d/<clientname>.conf
#
# This configuration file should be empty (or just comments).  However, it
# needs to exist for various Bedrock Linux utilities to properly recognize the
# core Bedrock Linux system for commands such as "brc", "bri -l", etc.
#
# However, since this is here anyways, may as well use it as a source of
# documentation for the client.conf files for other clients.
#
### enable/disable status
#
# The existence of a (root owned, non-root-unwritable) file at
#
#     /bedrock/etc/clients.d/<clientname>.conf
#
# indicates configuration for an (enabled) client.  If the filename is, instead,
#
#     /bedrock/etc/clients.d/<clientname>.conf.disabled
#
# then the client is considered disabled (so one cannot use it with "brc").
# However, it will contain configuration necessary to re-enable it (with brs).
#
# The defaults are in general fairly good.  To set the client to use the default
# configuration, simply include "framework = default" as the only content, like
# so:
#
# echo "framework = default" > /bedrock/etc/clients.d/~(clientname~).conf`
#
# If you would like to understand what these defaults *are* so you can change or
# improve upon them for your specific situation, continue reading below.
#
### Settings
#
# The contents of the configuration files are simply a series of "key = value"
# lines.  Blank lines and lines starting with "#" are ignored.  Baring
# newlines, it is flexible about whitespace.
#
# There are eight recognized keys in Bedrock Linux 1.0beta1 Hawkey:
# - share
# - bind
# - union
# - preenable
# - postenable
# - predisable
# - postdisable
# - framework
#
### Share
#
# Bedrock Linux's files are broken up into two categories: "local" and
# "global".  The difference between the two is there is only one instance of
# any given global file, while there may be multiple instances (up to one per
# client) of a local file.
#
# Without any configuration, everything is local.  There are three ways to make
# something global, one of which is "share".  This is the most common method
# and is the recommended default for most items.  If neither the description of
# "bind" or "union" seems fitting, this is the setting one should use to make
# something global.
#
# Example:
#
#     share = /proc, /sys, /dev, /home, /root, /lib/modules, /tmp, /var/tmp, /mnt, /media, /run
#
### Bind
#
# Bind is exactly like share except if any items are mounted in a "bind" item,
# they are set to local.  For example, if one mounts a CD at /mnt/cdrom, and
# /mnt or /mnt/cdrom is set to "bind", then only the client which ran the mount
# command will be able to see it.  However, if the item is set to "share", then
# any new mount points under it will be global and processes from other clients
# will be able to see the contents of /mnt/cdrom as well.
#
# For the most part, you probably want share rather than bind.  The main
# exception is anything in /bedrock; as if anything there is set to "share"
# then the explicit path will not function properly.  Anything in /bedrock
# should be set to "bind".  If you put /bedrock/clients, or any specific
# client, on its own filesystem, be sure to both (1) add it to /etc/fstab to be
# mounted at boot and (2) add a bind item for it to your clients (or just to
# the default framework).
#
# Example:
#
#     bind = /bedrock, /bedrock/brpath, /bedrock/clients/bedrock
#
### Union
#
# Both bind and share have one notable fault: one cannot call rename() on them.
# Typically, one shares or binds a directory which never gets rename()'d and so
# this is a non-issue.  However, there is a notable exception with some files
# in /etc.  Files such as /etc/passwd should be global, but neighboring files
# such as /etc/issue should be local.  Thus, one cannot simply bind or share
# all of /etc.  Attempting to bind or share /etc/passwd will cause problems
# when the file is updated, as that file is updated via rename().
#
# The solution for this is the union setting.  Union can be set on a directory
# and told to only treat some files as global and leave others as local.  This
# is particularly important for /etc.  The downside to union is that it does
# have some overhead; one would not want a performance-sensitive database, for
# example, running on union.  Thus, union should only be used where rename() is
# an issue such that bind and share cannot be used.
#
# Note that while while one can typically break up one share or bind line into
# multiple ones without any trouble, union's syntax requires any collection of
# items within a union directory all be spelled out on the same potentially
# long line.
#
# Example:
#
#     union = /etc: profile, hostname, hosts, passwd, passwd-, group, group-, shadow, shadow-, gshadow, gshadow-, sudoers, resolv.conf, machine-id
#
#### preenable, postenable, predisable, postdisable
#
# Bedrock Linux supports hooks to run programs just before or after a client is
# enabled or disabled.  Note that the programs are run in the core; if you
# would like to run them in the client that is being enabled or disabled, the
# script itself must call brc.  Also note that the first argument to the
# program will be the name of the client.
#
# Bedrock Linux 1.0beta1 Hawkey uses the "preenable" script to force certain
# symlink setups on clients.
#
# Other possible uses for this being explored for future releases are:
#
# - Mount a sshfs or other remote filesystem on preenable and umount it on
# postdisable so that a remote machine can be treated like a client.  This can
# be advantageous over something such as `ssh -X` in that all of the latency
# will be on disk access, not user interface.
#
# - Merge some global files such as /etc/passwd on client enable and disable so
# that the UID and GIDs of the files on the client and the rest of the Bedrock
# Linux system are set proper if the client is also being used as a stand-alone
# system.  This could be useful to dual-boot with a client or have a
# liveusb/livecd Bedrock Linux system which automatically detects and adds
# local systems as clients on boot.
#
# Example:
#
#     preenable = /bedrock/share/brs/force-symlinks
#
### Bedrock Linux as a client
#
# There should be a file at /bedrock/clients/bedrock.conf to ensure bedrock is
# recognized as a client for commands such as bri and poweroff to work. This
# file can be empty.
#
# Additionally, the root directory should be bind-mounted into /bedrock/clients
# (as is done in the default /etc/fstab).
#
### Framework
#
# Multiple clients will likely share similar if not identical settings. Instead
# of duplicating many settings, a framework can be used to indicate that a
# collection of settings stored in
#
#     /bedrock/etc/frameworks.d/<frameworkname>
#
# is to be utilized.  Frameworks have the exact same syntax as normal
# client.conf files (and can refer to each other).  Typical Bedrock Linux
# systems may have one or two frameworks which which most client configurations
# utilize.
#
# A reference framework with recommended defaults for most clients should be
# available by default at
#
#     /bedrock/etc/frameworks.d/default
#
# Example:
#
#     framework = default
#
### Full example
#
#     framework = default
#
# or
#
#     share = /proc, /sys, /dev, /home, /root, /lib/modules, /tmp, /var/tmp, /mnt
#     share = /media, /run
#     bind =  /bedrock, /bedrock/brpath, /bedrock/clients/bedrock
#     union = /etc: profile, hostname, hosts, passwd, group, shadow, sudoers, resolv.conf, machine-id
#     preenable = /bedrock/share/brs/force-symlinks
