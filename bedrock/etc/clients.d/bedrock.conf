### /bedrock/etc/clients.d/<clientname>.conf
# This configuration file should be empty (or just comments).  However, it
# needs to exist for various Bedrock Linux utilities to properly recognize the
# core Bedrock Linux system for commands such as "brc", "bri -l", etc.
#
# However, since this is here anyways, may as well use it as a source of
# documentation for the client.conf files for other clients.
#
### enable/disable status
# The existence of a (root owned, non-root-unwritable) file at
#     /bedrock/etc/clients.d/<clientname>.conf
# indicates configuration for an (enabled) client.  If the filename is, instead,
#     /bedrock/etc/clients.d/<clientname>.conf.disabled
# then the client is considered disabled (so one cannot use it with "brc").
# However, it will contain configuration necessary to re-enable it (with brs).
#
### Settings
# The contents of the configuration files are simply a series of "key = value"
# lines.  Blank lines and lines starting with "#" are ignored.  Baring
# newlines, it is flexible about whitespace.
#
# There are three recognized keys in Bedrock Linux 1.0alpha4 Flopsie:
# "bind", "union", and "framework".
#
### Bind
# Most of any given client's files are separated from the rest of the system
# via chroot.  This way they will not conflict with each other.  However, many
# things should be shared between clients to ensure they can interoperate with
# other clients, such as /home and /tmp.  "bind" items are lists of files and
# directories which the given client should share with the rest of the system
# via bind-mounts.
#
# The values on the right side of the equals sign can be comma separated to
# list multiple items per line.
#
# There are two things to keep in mind when using bind items:
# - bind mounts are not (by default) recursive.  If you want to share a
# directory that contains a mount point (and the contained mount point), you'll
# need two bind items.  For example, if you want to share /dev and /dev/shm,
# that will have to be two separate items, since /dev/shm is usually mounted
# within /dev.  Moreover, the two items must be listed in the order they should
# be mounted.
# - The rename() system command cannot be used directly on a mount point,
# including the bind mounts utilized here.  For the most part this is a
# non-issue, as most things which are shared are directories which are not
# usually rename()'d.  However, there is a notable exception: there are files
# within /etc which should be shared (such as /etc/passwd) and other files
# within /etc which should not be shared (such as /etc/issue).  Hence, one
# cannot simply share (all of) /etc.  However, /etc/passwd is typically updated
# with rename(), and so bind-mounts are not a good way to share it.  Instead,
# use "union" (see below).
#
# Example:
#     bind = /proc, /sys, /dev, /dev/pts, /dev/shm, /bedrock
#     bind = /bedrock/clients/bedrock, /home, /root, /lib/modules, /tmp, /var/tmp
#
### Union
# union is similar in purpose to bind.  However, it is different in two ways:
# - it does not have the same restriction on rename()
# - it has a non-negligible performance overhead.
#
# Thus, the majority of shared items should use bind (to maximize performance),
# except those which need to be updated via rename().
#
# The first item on the right side of the equals sign should be the directory
# containing the item(s) to be shared, followed by a colon, followed by a
# comma-separated list of items to be shared relative to the first item without
# a starting slash.  This may be better explained with examples, see below.
#
# Note that the first item listed is a mount point.  One cannot use two union
# items on the same directory or the latter one will be mounted over the former
# and the former will be inaccessible.  Instead, combine them into one line.
#
# Example:
#     union = /etc: profile, hostname, hosts, passwd, group, shadow, sudoers, resolv.conf
#
### Framework
# Multiple clients will likely share similar if not identical bind/union
# settings.  Instead of duplicating many settings, a framework can be used to
# indicate that a collection of settings stored in
#     /bedrock/etc/frameworks.d/<frameworkname>
# are to be utilized.  Frameworks have the exact same syntax as normal
# client.conf files (and can refer to each other).  Typical Bedrock Linux
# systems may have one or two frameworks which which most client configurations
# utilize.
#
# A reference framework with recommended defaults for most clients should be
# available by default at
#     /bedrock/etc/frameworks.d/default
#
# Example:
#     framework = default
#
### Recommended Bind/Union Settings
#
# Following is a list of the files and directories which you should consider
# for the "bind" and "union" settings in your clients and frameworks.  This is
# not exhaustive - if you can think of something else you would like to share,
# feel free to do so.  Moreover, if you disagree with the recommendation and
# feel you understand the repercussions of not sharing something, you may skip
# sharing these directories.  Do not blindly take values from this, as many of
# this are potentially problematic - these are recommended for *consideration
# for use* rather than necessarily for use.
#
## Required for basic functionality
# The following directories are expected to be set up by many programs which
# require them for basic functionality.  You almost certainly want these for
# all of your clients.
#     bind = /proc, /dev, /dev/pts, /sys
#
## Required for Bedrock Linux functionality
# The following should be shared in any client that should be able to run
# commands in other clients.  If you are attempting to set up a limited client
# without such functionality, this can be skipped.
#     bind = /bedrock, /bedrock/clients/bedrock
#     union = /etc: /etc/profile
#
## Temporary directories
# Many programs create temporary files in these directories.  These files are
# often used to communicate with other programs.  To ensure these inter-program
# communication function across clients, you should share these directories.
#     bind = /tmp, /var/tmp, /dev/shm
# Note that "/dev/shm" should be *after* "/dev" if you are sharing "/dev".
#
## User files
# Most of the user-specific files will be in /home and, for the root user,
# /root.  You probably want these shared across clients.
#     bind = /home, /root
#
## Host files
# Some programs will expect these files to be populated.  Note that you do not
# necessarily have to make these the same in all clients, but if you cannot
# think of a reason to differentiate them, it is probably best to ensure they
# are the same.
#     union = /etc: hostname, hosts
#
## modules
# The modules for the Linux kernel are traditionally kept in /lib/modules.  If
# multiple clients would like to load these modules (or install non-upstreamed
# modules), the directory should be shared with all clients.  Note that some
# Linux distributions are moving these to /usr/lib/modules, now, and leaving a
# symlink at /lib/modules pointing accordingly.  This should not be a problem
# so long as the symlink is there.  However, if you have multiple clients which
# use the same name for their kernels which attempt to install modules there
# could be a conflict.  This is unlikely if you do not use multiple clients of
# the same distro/release which all have the kernel/modules packages installed,
# but is something to be careful about nonetheless.  If you are using a kernel
# from a client, you almost certainly want to share this directory with at
# least that client.
#     bind = /lib/modules
#
## boot
# Like /lib/modules, sharing this directory could be useful if you are using a
# kernel from a client so the client can keep the kernel you are using up to
# date.  However, this also means if that client or another client which also
# shares /boot has a problem or there is a conflict, it could potentially make
# your system unbootable.  There also are not very many benefits to sharing
# this with clients which will not have their kernels used for booting.  It
# might be safest to simply manually copy the kernel files from the /boot of
# the respective clients into the core where they are out of reach of the
# client's package managers.
#     bind = /boot
#
## firmware
# Like /lib/modules and /boot, it can be useful to use a client's /lib/firmware
# if you are also using its kernel.  However, this can easily conflict with
# other clients.  In general, it is probably best to simply copy files from
# clients into the core Bedrock's /lib/firmware.
#     bind = /lib/firmware
