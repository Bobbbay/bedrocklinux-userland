### Bedrock Linux 1.0alpha3 Bosco
### rc.conf configuration file
# This "configuration file" is a bourne shell script which is sourced.  Be
# careful with spaces and special characters like backslashes.  It is unlikely,
# but for some very unusual configuration settings You might have to quote
# and/or escape some things - treat the values as bourne shell strings.

## Set timezone
# for details, search for POSIX TZ variable specifications or guide, such as:
# http://pubs.opengroup.org/onlinepubs/7908799/xbd/envvar.html (UNIX)
# http://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html (GNU)
# http://www-01.ibm.com/support/docview.wss?uid=isg3T1000252 (AIX)
# e.g.: TZ=EST+5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00
TZ=

## Hardware Clock Timezone
# Indicate whether internal system clock is set to LOCAL or UTC
# If you are dual-booting with Windows, you probably want LOCAL.  Otherwise,
# you probably want UTC.
# e.g.: HWCLOCK=UTC
HWCLOCK=

## Language
# Set the POSIX LANG variable to set the language/locale information.
# e.g.: en_US.UTF-8
LANG=

## Device Manager
# Determines which device manager bedrock will use.  Three options are available:
# 1. "mdev": Bedrock Linux will use busybox's mdev at boot.  If you have no clients
# which provide udev, or you do not like udev, this provides a similar
# service.
# 2. "udev": Bedrock Linux will use udev from a client at boot.  This has more
# features than mdev (for example, X11 can use it to automatically detect your
# hardware).  It is what is used in most major Linux distributions.  However,
# it requires udev be installed in a client.  Should this fail - for example,
# if the client is deleted by a user who forgets to update this config -
# Bedrock Linux will attempt to fall back to mdev.
# 3. "static": Bedrock will assume a static /dev has been created, and will not
# attempt to manage /dev at all.  This is useful for systems where the devices
# are unlikely to change between boots or during usage, such as embedded
# systems.
# 4. "initrd": This informs Bedrock's init that the initrd in use has set up
# both /dev and a device manager, and that it should be left alone.  This may
# not work well if the initrd's device manager expects things to be in place in
# the filesystem after the init has finished which Bedrock does not provide.
# If the initrd sets up /dev and a device manager but another value is used for
# this setting, Bedrock's init will attempt to remove the initrd's work before
# using what you set.
# e.g.: DEVICE_MANAGER=mdev
DEVICE_MANAGER=
# If using DEVICE_MANAGER=udev, UDEV_CLIENT specifies which client's udev to
# utilize.  If this is left blank, Bedrock Linux will attempt to use the udev
# components specified in /bedrock/sbrpath (which are populated by brp).  If
# this, too, fails, Bedrock Linux will attempt to fall back to mdev.
# e.g.: UDEV_CLIENT=squeeze
UDEV_CLIENT=

## Filesystem check at boot
# if FSCK=1, Bedrock will attempt to run fsck at boot.  Otherwise, Bedrock will
# skip running fsck at boot.  If you are using an initrd which runs fsck, it
# could be beneficial to set FSCK=0 to avoid running fsck twice at boot.
FSCK=

## PATH
# Sets the normal user POSIX PATH variable.  These are the directories in which
# programs look for executables.  If you aren't sure what to put here, you
# almost certainly want the value in the example below.  Note that /etc/profile
# - which should be sourced by your shell when it starts - will add items to
# the beginning and end of this variable to make it play with Bedrock specific
# functionality.
# e.g.: NPATH=/usr/local/bin:/usr/bin:/bin
NPATH=
# Sets additional directories for the super user's (aka root's) POSIX PATH
# variable.  Same general idea as above, but for the root user who probably
# needs access to the s* directories
# that the non-root user does not.
# e.g.: SPATH=/usr/local/sbin:/usr/sbin:/sbin
SPATH=
