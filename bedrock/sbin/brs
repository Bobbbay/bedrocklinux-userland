#!/bin/sh
### Bedrock Linux 1.0alpha4 Flopsie
### brs (BedRock Setup)

# sets up or tears down a client

# ensure the mount source and destination both exist
# first arg is client, second arg is mount point
ensure_exists() {
	src=$2
	dst=/bedrock/clients/$1$2
	if [ -e $src ] && [ -e $dst ]
	then
		return 0
	elif [ -d $src ] && ! [ -e $dst ]
	then
		return mkdir -p $dst
	elif [ -f $src ] && ! [ -e $dst ]
	then
		return touch $dst
	elif ! [ -e $src ] && [ -d $dst ]
	then
		return mkdir -p $src
	elif ! [ -e $src ] && [ -f $dst ]
	then
		return touch $src
	else
		# couldn't resolve situation
		return 1
	fi
}

# loop over clients listed in arguments and enable them
up() {
	while [ -n "$1" ]
	do
		# refuse to setup partially setup clients to avoid mounting over mount points
		if bri -s $1 | grep -q "fully mounted"
		then
			echo "Error: $1 is already setup.  Maybe teardown and set up again?"
			shift; continue
		elif bri -s $1 | grep -q "partially mounted"
		then
			echo "Error: $1 is partially setup.  Teardown fully before setting up."
			shift; continue
		fi
		echo "Setting up $1..."

		echo -n "Mounting bind items... "
		for mount_point in $(bri -b $1)
		do
			if ensure_exists $1 $mount_point
			then
				mount --bind "$mount_point" "/bedrock/clients/$1$mount_point"
			else
				echo "ERROR: Could not mount $mount_point.  Check that"
				echo "$mount_point and /bedrock/clients/$1$mount_point"
				echo "both exist and are the same file type"
				echo "(normal file, directory, etc)."
				exit 1
			fi
		done
		echo "done"

		echo -n "Mounting union items... "
		bri -u $1 | awk -v"client=$1" -F'([ ,:]|\\t)+' '
			{
				# mount bru at the mount point for the client
				# e.g.: /bedrock/sbin/bru /bedrock/clients/squeeze/etc
				cmd = "/bedrock/sbin/brU /bedrock/clients/"client$1
				# first arg should be the client self-view (without mounts)
				# e.g.: /bedrock/clients/squeeze/bedrock/clients/squeeze/etc
				#       |               |                               \ self-view of /etc without mounts
				#       |               \ squeeze chroot is here
				#       \ absolute root
				cmd = cmd" /bedrock/clients/"client"/bedrock/clients/"client$1
				# second arg should be the equivalent location in the core
				cmd = cmd" "$1
				# remaining args are files to be redirected to the core
				for (i=2; i<=NF; i++) {
					cmd = cmd " /"$i
				}
				# background it so this process will return
				cmd = cmd "&"
				# run it
				system(cmd)
			}
		'
		echo "done"

		echo -n "Checking results..."
		if ! bri -s $1 | grep -q "fully mounted"
		then
			echo "ERROR: Failed to fully mount $sid"
			echo "See bri -s $1"
			exit 1
		fi
		echo "done"

		echo -n "Setting as enabled..."
		if [ -r "/bedrock/etc/clients.d/$1.conf" ]
		then
			if [ -r "/bedrock/etc/clients.d/$1.conf.disabled" ]
			then
				echo "Error!"
				echo "Config exists for both states:"
				echo "    /bedrock/etc/clients.d/$1.conf"
				echo "and"
				echo "    /bedrock/etc/clients.d/$1.conf.conf"
				echo "This must be resolved manually."
			else
				echo "already set enabled."
				echo "$1 completely setup"
			fi
		else
			if [ -r "/bedrock/etc/clients.d/$1.conf.disabled" ]
			then
				mv /bedrock/etc/clients.d/$1.conf.disabled /bedrock/etc/clients.d/$1.conf
				echo "done"
				echo "$1 completely setup"
			else
				# Should be pretty unlikely this happens, but just in case.
				echo "Error!"
				echo "No config exists."
				echo "This must be resolved manually."
			fi
		fi

		shift
	done
}

down() {
	while [ -n "$1" ]
	do
		# kill all of the client's processes
		echo -n "Killing processes... "
		pids=$(bri -P $1 | cut -d' ' -f1 | xargs)
		pid_count=$(echo -n $pids | wc -c)
		pid_count_previous=$(expr $pid_count + 1)
		while [ $pid_count -gt 0 ] && [ $pid_count -lt $pid_count_previous ]
		do
			kill $pids 2>/dev/null
			sleep 1
			kill -9 $pids 2>/dev/null
			pids=$(bri -P $1 | cut -d' ' -f1 | xargs)
			pid_count_previous=$pid_count
			pid_count=$(echo -n $pids | wc -c)
		done
		if [ $pid_count -gt 0 ]
		then
			echo "ERROR: Could not kill all processes!"
			echo "See bri -P $1"
			exit 1
		fi
		echo "done"

		# unmount all of the client's mount points
		echo -n "Unmounting mount points... "
		mounts=$(bri -m $1 | awk '{print "/bedrock/clients/'"$1"'"$1}') 2>/dev/null
		mount_count=$(echo -n $mounts | wc -c)
		mount_count_previous=$(expr $mount_count + 1)
		while [ $mount_count -gt 0 ] && [ $mount_count -lt $mount_count_previous ]
		do
			for mount in $(echo $mounts | sort -r)
			do
				brc bedrock umount $mount 2>/dev/null
			done
			mount_count_previous=$mount_count
			mounts=$(bri -m $1 | awk '{print "/bedrock/clients/'"$1"'"$1}') 2>/dev/null
			mount_count=$(echo -n $mounts | wc -c)
		done
		if [ $pid_count -gt 0 ]
		then
			echo "ERROR: Could not unmount all mount points!"
			echo "See bri -m $1"
			exit 1
		fi
		echo "done"

		# double check work
		echo -n "Double checking process count... "
		if [ "$(echo -n $pids | wc -c)" != 0 ]
		then
			echo "error"
			echo "Processes remain"
			echo "See bri -P $1"
			exit 1
		fi
		echo "done"
		echo -n "Double checking mount count... "
		if ! bri -s $1 | grep -q "no mounts"
		then
			echo "error"
			echo "Mounts remain"
			echo "See bri -s $1"
			exit 1
		fi
		echo "done"

		echo -n "Setting as disabled..."
		if [ -r "/bedrock/etc/clients.d/$1.conf" ]
		then
			if [ -r "/bedrock/etc/clients.d/$1.conf.disabled" ]
			then
				echo "Error!"
				echo "Config exists for both states:"
				echo "    /bedrock/etc/clients.d/$1.conf"
				echo "and"
				echo "    /bedrock/etc/clients.d/$1.conf.conf"
				echo "This must be resolved manually."
			else
				mv /bedrock/etc/clients.d/$1.conf /bedrock/etc/clients.d/$1.conf.disabled
				echo "done"
				echo "$1 completely torn down"
			fi
		else
			if [ -r "/bedrock/etc/clients.d/$1.conf.disabled" ]
			then
				echo "already set disabled."
				echo "$1 completely torn down"
			else
				# Should be pretty unlikely this happens, but just in case.
				echo "Error!"
				echo "No config exists."
				echo "This must be resolved manually."
			fi
		fi

	shift
	done
}

if [ "$1" != "up" ] && [ "$1" != "down" ]
then
cat <<EOF
Usage: brs [up/down] [CLIENTS]

brs will setup or teardown the specified client(s).  The first argument should
be "up" to setup a client or "down" to teardown the client.  The remaining
arguments should be a list of clients to operate on.
EOF
	exit 1
fi

if [ "$2" = "bedrock" ]
then
	echo "Cannot setup/teardown core Bedrock"
	exit 2
fi

# command has to be run in the core
if [ "$(bri -n)" != "bedrock" ]
then
	echo "Warning: This must be run in the bedrock core; running \`brc bedrock\`"
	exec /bedrock/bin/brc bedrock $0 $@
fi

if [ "$1" = "up" ]
then
	shift
	# loop over clients to bring up
	up "$@"
else
	shift
	# loop over clients to tear down
	down "$@"
fi
