#!/bedrock/bin/busybox sh
### Bedrock Linux 1.0beta1 Hawkey
### bri (BedRock Information / BedRock Introspection)
# This script will provide information about Bedrock Linux subsystems

# Abort if anything returns non-zero unexpectedly
#set -e TODO: go through and ensure everything that could desirably fail, like a "grep", is || true'd
# Abort if accessing unassigned variable
set -u

#  -----------------------------------------------------------------------------
#  - support functions                                                         -
#  -----------------------------------------------------------------------------

# given a pid as an argument, prints the client which provides the pid
#
# Note: there is a possibly faster way by readlink'ing /proc/$pid/root, except:
# - it does not differentiate between local-client and core bedrock
#   - this could be resolved by brc'ing to bedrock
# - it requires root to use for another user's process
# Note: Prior versions of this assumed pid1 was in the core.  If Bedrock Linux support
# having PID1 provided by a client, this assumption will be false.  Instead,
# `brc bedrock` is used to check the core.
pid_client() {
	# pick a mount point visible by the process
	mount_number="$(head -n1 /proc/$1/mountinfo | cut -d" " -f1)"
	# find where the core sees it as mounted
	core_view="$(brc bedrock sh -c 'grep "^'"$mount_number"' " /proc/$$/mountinfo' | cut -d" " -f5)"
	# find where the process sees it as mounted
	client_view="$(grep "^$mount_number " /proc/$1/mountinfo | cut -d' ' -f5)"

	# if the process sees it mounted the same place as the core does, then the
	# process is in the core
	if [ "$core_view" = "$client_view" ]
	then
		echo "bedrock"
	else
		# must be in a client other than bedrock
		# the core will see it mounted at
		# <empty>/bedrock/client/<clientname>/something
		# |       |       |      |            \- from here on out don't care
		# |       |       |      \- client name
		# |       |       \- third field
		# |       \- second field
		# \- first (empty) field
		# Thus, the fourth field will be the client.  Note that forward slashes
		# are not allowed in Linux file names.
		echo "$core_view" | cut -d'/' -f4
	fi
}

# Parses client config/frameworks and returns requested information.
# - First argument: the client
# - Second argument: the key (bind, share, union, etc)
# - Third argument: format information
#   - "first" -> only print first item per key and ignore the rest
#   - "firstreal" -> only print first item per key, filter through "realpath"
#   relative to real root.
#   - "oneline" -> the config line without alteration.  This is useful for
#   union where "all/allreal" would break up useful information.
#   - "all" -> print all config items, one per line.
#   - "allreal" -> print all config items, one per line, filter through
#   "realpath" relative to real root
#
# Note realpath may fail in some situations, such as if the client is not set
# up.  In these situations the this function will fall back to printing without
# the realpath filter.

# the awkward -F is because some versions of buysbox's awk doesn't seem to like
# \t for a tab in a character class.
get_values() {
	# determine which config file to use, depending on whether the client is
	# enabled or not
	if [ -r "/bedrock/etc/clients.d/${1}.conf" ]
	then
		config="/bedrock/etc/clients.d/${1}.conf"
	elif [ -r "/bedrock/etc/clients.d/${1}.conf.disabled" ]
	then
		config="/bedrock/etc/clients.d/${1}.conf.disabled"
	else
		echo "Cannot read config at /bedrock/etc/clients.d/${1}.conf or /bedrock/etc/clients.d/${1}.conf.disabled" >&2
		exit 1
	fi
	awk -v"client=$1" -v"key=$2" -v"format=$3" -F'([ ,:]|\\t)+' '
		# find instances of the key in the current file and print values as
		# requested.
		$0 ~ "^[ \t]*"key"[ \t]*=[ \t]*[^ \t]" {
			# should not be necessary, but trailing separators confuses some
			# versions of busybox awk
			sub(/([ ,:]|\\t)$/,"")
			# remove "key ="
			sub("^[ \t]*"key"[ \t]*=[ \t]*","")
			# print output per formatting request
			if (format == "first") {
				print $1
			} else if (format == "firstreal") {
				if (system("realpath /bedrock/clients/"client $1" 2>/dev/null") != 0)
					print "/bedrock/clients/"client $1
			} else if (format == "oneline") {
				print $0
			} else if (format == "all") {
				for (i=1; i<=NF; i++) {
					print $i
				}
			} else if (format == "allreal") {
				for (i=1; i<=NF; i++) {
					if (system("realpath /bedrock/clients/"client $i" 2>/dev/null") != 0)
						print "/bedrock/clients/"client $i
				}
			}
		}

		# find new frameworks in the current file and add them to ARGV to
		# process
		/^[ \t]*framework[ \t]*=[ \t]*[^ \t]/ {
			# remove "framework ="
			sub(/^[ \t]*framework[ \t]*=[ \t]*/,"")
			# iterate over values (which are each awk fields)
			for (i=1; i<=NF; i++) {
				if ($i != "" && (!($i in frameworks))) {
					# track frameworks we have processed so we do not reprocess
					# them
					frameworks[$i]
					ARGV[ARGC] = "/bedrock/etc/frameworks.d/"$i
					ARGC++
				}
			}
		}
	' $config
}

# This simply checks to ensure sufficient arguments have been provided.
arg_count_check() {
	if [ "$1" -lt "$2" ]
	then
		echo "ERROR: Insufficient arguments: $1 arguments provided, at least $2 arguments expected"
		return 1;
	fi
}

#  -----------------------------------------------------------------------------
#  - functions for each flag                                                   -
#  -----------------------------------------------------------------------------
#
# The functions have the same name as the corresponding flag.

# Print config values.  This is useful for:
# - end-user to check frameworks are set up as desired
# - other utilities to use this rather than each read the configs with their own code
c() {
	arg_count_check "$#" "2"
	# everything but union should use "all"
	if [ "$2" = "union" ]
	then
		format="oneline"
	else
		format="all"
	fi
	get_values "$1" "$2" "$format"
}

# Caches -n value to speed up future -n requests
C() {
	if [ "$(id -u)" != "0" ]
	then
		echo "bri -C requires root"
		exit 1
	fi
	while [ -n "${1:-}" ]
	do
		echo "$1 > /bedrock/clients/$1/etc/br_client_name"
		echo "$1" > /bedrock/clients/$1/etc/br_client_name
		chmod 644 /bedrock/clients/$1/etc/br_client_name
		shift
	done
}

# print help
h() {
cat <<EOF
Usage: bri ARGUMENT

bri will provide information about Bedrock Linux subsystems.

Since the flags must all be the first argument, there is no ambiguity; the "-"
character is optional.

ARGUMENTS:
   -c   first following term must be client, second must be Config key.  prints
        corresponding Config values.
   -C   Cache -n value of current OR following client name(s) (requires root)
        provides a small performance improvement to following -n requests
   -h   print this Help
   -l   print List of enabled clients
   -L   print List of all clients, enabled and disabled
   -m   prints Mount points in current client OR following client name(s)
   -n   print Name of client corresponding to current process
   -p   print the client that provides the following Process id or
        (non-numeric) Process name
   -P   print a list of Processes provided by the current client OR following
        client name(s)
   -s   print the setup Status of the current OR following client name(s)
   -w   print the client Which provides the command(s) in the argument(s)
EOF
}

# print a list of enabled clients
l() {
	cd /bedrock/etc/clients.d
	ls *.conf | sed 's/.....$//'
}

# print a list of all clients, both enabled and disabled
L() {
	cd /bedrock/etc/clients.d
	ls *.conf | sed 's/.....$//'
	ls *.conf.disabled | sed 's/..............$//'
}

# print mount points and corresponding category in specified client(s)
m() {
	while [ -n "${1:-}" ]
	do
		client="${1}"
		shift

		if [ "$client" = "bedrock" ]
		then
			# The core must be handled differently from clients.  For one
			# thing, it has no config values.

			# iterate over mount points not in any clients (i.e. just in core),
			# just printing them along with the only possible type information:
			# (other/OK)
			brc bedrock sh -c 'cat /proc/$$/mountinfo' | awk '$5 !~ "^/bedrock/clients(/|$)"{print $5" (other/OK)"}'
			continue
		fi

		# get the configured mount points (to compare)
		bind_mounts=$(get_values "$client" "bind" "allreal")
		union_mounts=$(get_values "$client" "union" "firstreal")
		share_mounts=$(get_values "$client" "share" "allreal")
		# get all mount points
		all_mounts="$(brc bedrock sh -c 'cat /proc/$$/mountinfo')"
		# get mount points for client from core's point of view
		client_mounts="$(brc bedrock sh -c 'cat /proc/$$/mountinfo' | awk '$5 ~ "^/bedrock/clients/'"${client}"'(/|$)"')"

IFS="
"
		# iterate over mount points, determining (1) type and (2) if this matches config then (3) print output
		for mount_line in $client_mounts
		do
			# Gather useful here.  Makes if/else tree later easier to read.
			# However, it calculates things which may not be necessary and
			# slows things down.  TODO: consider refactor for performance
			# benefit.
			mount_point=$(echo $mount_line | cut -d' ' -f5)
			core_equivalent_mount_point=/$(echo $mount_point | cut -d/ -f5-)
			mount_point_stat="$(brc bedrock stat $mount_point 2>/dev/null | awk 'NR>1')"
			core_equivalent_mount_point_stat="$(brc bedrock stat $core_equivalent_mount_point 2>/dev/null | awk 'NR>1')"
			fs_type=$(echo "$mount_line" | awk '{
				for (i=7; i<NF; i++) {
					if ($i == "-") {
						print$(i+1)
						exit
					}
				}
			}')
			shared=$(echo "$mount_line" | awk '{
				for (i=7; i<NF; i++) {
					if ($i ~ "^shared:[0-9][0-9]*"){
						print "true"
						exit
					} else if ($i == "-"){
						print "false"
						exit
					}
				}
			}')
			parent_line_number="$(echo $mount_line | cut -d' ' -f2)"
			parent_line="$(echo "$all_mounts" | awk '$1 == '$parent_line_number)"
			parent_shared=$(echo "$parent_line" | awk '{
				for (i=7; i<NF; i++) {
					if ($i ~ "^shared:[0-9][0-9]*"){
						print "true"
						exit
					} else if ($i == "-"){
						print "false"
						exit
					}
				}
			}')

			# Determine mount type.
			# Five possibilities:
			# - subshare
			#   - mount line and parent's mount line should both have an option field saying "shared:\d\+"
			# - share
			#   - none of the above and mount line has optional field saying shared
			# - bind
			#   - none of the above and stat output matches core equivalent path
			# - union
			#   - none of the above and filesystem type filed says "fuse.bru"
			# - other
			#   - none of the above
			if $parent_shared && $shared
			then
				found_type="subshare"
			elif $shared
			then
				found_type="share"
			elif [ "$mount_point_stat" = "$core_equivalent_mount_point_stat" ]
			then
				found_type="bind"
			elif [ "$fs_type" = "fuse.bru" ]
			then
				found_type="union"
			else
				found_type="other"
			fi

			# Determine if a given mount type was expected
			if echo "$bind_mounts" | grep -q "^$mount_point$"
			then
				expected_type="bind"
			elif echo "$union_mounts" | grep -q "^$mount_point$"
			then
				expected_type="union"
			elif echo "$share_mounts" | grep -q "^$mount_point$"
			then
				expected_type="share"
			elif echo "$share_mounts" | grep -q "^$mount_point/"
			then
				expected_type="subshare"
			else
				expected_type="other"
			fi

			# Print output
			if [ "$found_type" = "$expected_type" ] ||\
				[ "$expected_type" = "subshare" ] ||\
				[ "$expected_type" = "other" ] ||\
				( [ "$expected_type" = "share" ] && [ "$found_type" = "subshare" ] )
			then
				match="OK"
			else
				match="expected: $expected_type"
			fi
			echo "$core_equivalent_mount_point ($found_type/$match)"

		done
	done
}

# find the client that we're currently in
n() {
	# if cached value, use that for tiny (0.025s -> 0.007s) performance boost
	if [ -r /etc/br_client_name ]
	then
		cat /etc/br_client_name
	else
		pid_client $$
	fi
}

# find the client that provides the specified process by pid or (non-numeric)
# name
p() {
	while [ -n "${1:-}" ]
	do
		if echo "$1" | grep -q "^[0-9]*$"
		then
			pids="$1"
		else
			pids="$(pidof $1)"
		fi
		mentioned=" "
		for pid in $(echo $pids)
		do
			echo "$pid $(cat /proc/$pid/comm) ($(pid_client $pid))"
		done
		shift
	done
}

# print the pids all of the processes that are currently being provided by a
# client
P() {
	while [ -n "${1:-}" ]
	do
		for pid in $(ls /proc | grep "^[0-9]*$")
		do
				# only want process that are not a zombie or kernel process and
				# are in the client for which we're looking.
				if [ -n "$(cat /proc/$pid/cmdline)" ] && \
					[ "$(pid_client $pid)" = "$1" ]
				then
					echo "$pid $(cat /proc/$pid/comm) ($(pid_client $pid))"
				fi
		done 2>/dev/null # pids can disappear on us mid-run
		shift
	done
}

# Print client status
s() {
	while [ -n "${1:-}" ]
	do
		client="${1}"
		shift
		if [ "$client" = "bedrock" ]
		then
			echo "bedrock: no setup needed"
		else
			# figure out if client is configured as enabled or disabled
			if [ -r "/bedrock/etc/clients.d/$client.conf" ]
			then
				enable_status="enabled"
			elif [ -r "/bedrock/etc/clients.d/$client.conf.disabled" ]
			then
				enable_status="disabled"
			else
				echo "ERROR: No config corresponding to \"$client\""
			fi

			# generalize mount status as one of the following:
			# - problematic mounts
			# - fully mounted
			# - no expected mounts
			# - partially mounted

			mounts="$(m $client)"
			# anything that m() kicks out that doesn't end in (.../OK) is a
			# problem.  All of these problematic outputs end in something that
			# isn't a K followed by ).
			found_problem_mounts="$(echo "$mounts" | grep '[^K])$')"
			found_problem_count="$(echo "$found_problem_mounts" | wc -l)"
			found_good_mounts="$(echo "$mounts" | grep '/OK)$' | grep -v "subshare/OK)$" | grep -v "other/OK)$")"
			found_good_mount_count="$(echo "$found_good_mounts" | wc -l)"
			goal_good_mounts="$(
				(
					get_values "$client" "bind" "allreal"
					get_values "$client" "share" "allreal"
					get_values "$client" "union" "firstreal"
				)
			)"
			goal_good_mount_count="$(echo "$goal_good_mounts" | wc -l)"

			if [ -n "$found_problem_mounts" ]
			then
				mount_status="problematic mounts"
			elif [ "$found_good_mount_count" -eq "$goal_good_mount_count" ]
			then
				mount_status="fully mounted ($found_good_mount_count/$goal_good_mount_count)"
			elif [ "$found_good_mount_count" -eq 0 ]
			then
				mount_status="no expected mounts ($found_good_mount_count/$goal_good_mount_count)"
			else
				mount_status="partially mounted ($found_good_mount_count/$goal_good_mount_count)"
			fi

			echo "$client: $enable_status, $mount_status"

IFS_ORIG="$IFS"
IFS="
"
			# if there is a problem, print out additional information describing it to help debug
			if [ "$found_problem_count" -ne 0 ]
			then
				for mount in $found_problem_mounts
				do
					echo "problematic mount: $mount"
				done
			fi
			# if there is a mount which is (1) expected, (2) not listed in the
			# good mounts and (3) not listed as a problematic mount, list it to help debug.
			if [ "$found_good_mount_count" -lt "$goal_good_mount_count" ]
			then
				# loop over goal mounts
				for goal_mount in $(echo "$goal_good_mounts" | cut -d'/' -f5- | sed 's,^,/,')
				do
					found=/bin/false
					# loop over found mounts.  If a goal one is not found in this list, it's missing.
					for found_mount in $(echo "$found_good_mounts" | awk -F"(" '{$NF="";sub("..$","",$0)}1')
					do
						if [ "$goal_mount" = "$found_mount" ]
						then
							found=/bin/true
							continue
						fi
					done
					if ! $found
					then
						# We found a missing one.  Check that it isn't in the
						# problematic mounts list (as we've already listed
						# those).
						found=/bin/false
						for problem_mount in $(echo "$found_problem_mounts" | awk -F"(" '{$NF="";sub("..$","",$0)}1')
						do
							if [ "$goal_mount" = "$problem_mount" ]
							then
								found=/bin/true
							fi
						done
						if ! $found
						then
							echo "missing mount: $goal_mount"
						fi
					fi
				done
			fi
IFS="$IFS_ORIG"
		fi
	done
}

# print client which provides command
# TODO: we should differentiate between local and global for the last category.
# We need a reliable way to determine if something is global or not.  Comparing
# stat(1) output is probably the fastest/easiest way to rule out most things
# that are not global; if those differ, it's local.  Unless symlinks are going
# to be misleading there somehow.  Even if symlinks aren't a problem, stat(1)
# comparison doesn't guarantee global, only guarantees local.  Maybe find the
# item's mount point and check against m() if it is global?
w() {
	while [ -n "${1:-}" ]
	do
		loc=$(/bedrock/bin/busybox which $1)
		if [ "$?" -ne 0 ]
		then
			# could not find the executable
			echo "- (nonexistent)"
		elif echo "$loc" | grep -q "^/bedrock/bin/" || \
			echo "$loc" | grep -q "^/bedrock/sbin/"
		then
			# if the executable is in /bedrock/{bin,sbin} then it is being
			# accessed directly without brc, but isn't technically part of the
			# local client, either.
			echo "bedrock (direct/global)"
		elif echo "$loc" | grep -q "^/bedrock/brpath/"
		then
			# if the executable is in /bedrock/brpath, then it is being
			# provided by another client through the brc/brp.  Each of the
			# items in the brp path are shell script wrappers which call brc
			# for the given file.  The location of the client brc is to use is
			# constant; we can read that.
			awk 'NR==2{print $3 " (brc/local)"}' "$loc"
		else
			# if neither of the above situations is true, then the command is
			# being provided directly.  However, we still have to determine if
			# it is local or global.
			echo "$(n) (direct)"
		fi
		shift
	done
}

#  -----------------------------------------------------------------------------
#  - execution starts here                                                     -
#  -----------------------------------------------------------------------------

# This will brc to the core, which could result in directory jump warnings.  To
# avoid this, cd to the root.
cd /


# Parse arguments and call corresponding function.

flag=$1 # store flag that we'll use later
shift
extraargs="$@"
if [ -z "$extraargs" ]
then
	# -p and -w require additional args to work
	if [ "$flag" = "p" ] | [ "$flag" = "w" ]
	then
		echo "Additional arguments required, see bri -h"
	fi
	# Most flags which can take following args default to the current client if
	# no more args are provided.  If there are no more args, "fake" a following
	# arg as the default/current client.
	extraargs=$(n)
fi
case "$flag" in
	"-c"|"c")
		c $extraargs;;
	"-C"|"C")
		C $extraargs;;
	# -h is covered in *)
	"-l"|"l")
		l;;
	"-L"|"L")
		L;;
	"-m"|"m")
		m $extraargs;;
	"-n"|"n")
		n;;
	"-p"|"p")
		p $extraargs;;
	"-P"|"P")
		P $extraargs;;
	"-s"|"s")
		s $extraargs;;
	"-w"|"w")
		w $extraargs;;
	*)
		h;;
esac
