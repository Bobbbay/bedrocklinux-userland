#!/bin/sh
### Bedrock Linux 1.0alpha3 Bosco
### bri (BedRock Information)
# This script will provide various information about the clients, depending on
# the argument given

# print help
h(){
	echo "Usage: bri ARGUMENT"
	echo ""
	echo "bri will print information about Bedrock Linux clients based on the"
	echo "given flags.  bri will only accept one flag per execution."
	echo ""
	echo "ARGUMENTS:"
	echo "   -h   print this Help"
	echo "   -l   print List of clients"
	echo "   -n   print Name of client currently in"
	echo "   -p   print path of client currently in OR following client name(s)"
	echo "   -s   print shared items of client currently in OR following client name(s)"
	echo "   -c   Cache -n and -p values to speed up future requests (requires root)"
	echo "   -w   print the client which provides the command(s) in the"
	echo "        argument(s) if not available locally"
	echo "   -W   print the client which provides the command(s) in the"
	echo "        argument(s)"
}

# print a list of clients
l(){
	awk '
		/^\[client ".*"\]$/{
			print substr($0,10,length($0)-11)
		}
	' /bedrock/etc/brclients.conf
}

# print name of client currently in
n(){
	# if cached value is available, use that
	if [ -r "/etc/br_client_name" ]
	then
		head -n1 /etc/br_client_name
	else
		awk '
			/^\[client ".*"\]$/{
				CLIENT=substr($0,10,length($0)-11)
			}
			/^[ \t]*path[ \t]*=/ && $3 == "'$(p)'" && CLIENT != ""{
				print CLIENT
				exit
			}
		' /bedrock/etc/brclients.conf
	fi
}

# print path of client requested client
p(){
	# check if finding for current client or named clients
	if [ -z $1 ]
	then
		# print path of current client
		# if cached value is available, use that
		if [ -r "/etc/br_client_name" ]
		then
			tail -n1 /etc/br_client_name
		else
			# Compare a mount from both init's point of view and this script's point of
			# view to determine in which client the script is running.
			# The first mount as seen from the client should also be seen from init.  Find
			# the mount number to reference later.
			MOUNT_NUMBER=$(head -n1 /proc/$$/mountinfo | cut -d" " -f1)
			# Mount's location from init's POV
			INIT_VIEW="$(grep "^$MOUNT_NUMBER " /proc/1/mountinfo | cut -d' ' -f5)"
			# Mount's location from current POV
			CLIENT_VIEW="$(grep "^$MOUNT_NUMBER " /proc/$$/mountinfo | cut -d' ' -f5)"
			# Current POV's path is appended to init's.
			# If current POV is "/", actual mount path is whatever init's view is.
			# If current POV is the same as init's, the root is at the absolute root.
			# otherwise, remove current POV to find where client's root is mounted.
			if [ "$CLIENT_VIEW" = "/" ]
			then
				# if current POV is mounted at "/", then init's POV is absolute mount.
				MOUNT_PATH="$INIT_VIEW"
			elif [ "$CLIENT_VIEW" = "$INIT_VIEW" ]
			then
				MOUNT_PATH="/"
			else
				# Find lengths of both paths and then find difference to find where client's root is mounted.
				INIT_VIEW_LEN=$(echo "$INIT_VIEW" | wc -c)
				CLIENT_VIEW_LEN=$(echo "$CLIENT_VIEW" | wc -c)
				MOUNT_PATH=$(echo "$INIT_VIEW" | cut -c1-$(expr $INIT_VIEW_LEN - $CLIENT_VIEW_LEN))
			fi
			# The MOUNT_PATH we found is the mount point from init's point of view.
			echo $MOUNT_PATH
		fi
	else
		# print path of listed clients
		for CLIENT in $@
		do
			busybox awk '
			/^\[client ".*"\]$/{
				CLIENT=substr($0,10,length($0)-11)
			}
			/^[ \t]*path[ \t]*=/ && CLIENT == "'$CLIENT'"{
				$1=""
				$2=""
				print $0
			}
			' /bedrock/etc/brclients.conf | sed 's/^\s*//'
		done
	fi
}

# print shared items in a framework, used by s()
get_frame_shares(){
	awk '
		/^\s*\[framework "'$1'"\]\s*$/{
			INSECTION=1
		}
		/^\s*\[(client|framework) ".*"\]\s*$/ && $2 != "\"'$1'\"]"{
			INSECTION=""
		}
		/^[ \t]*share[ \t]*=/ && INSECTION == 1{
			$1=""
			$2=""
			gsub(/,/," ")
			for(i=1;i<=NF;i++)
				print $i
		}
	' /bedrock/etc/brclients.conf
}

# print shared items in a client (ignores frames), used by s()
get_client_shares(){
	awk '
		/^\s*\[client "'$1'"\]\s*$/{
			INSECTION=1
		}
		/^\s*\[(client|framework) ".*"\]\s*$/ && $2 != "\"'$1'\"]"{
			INSECTION=""
		}
		/^[ \t]*share[ \t]*=/ && INSECTION == 1{
			$1=""
			$2=""
			gsub(/,/," ")
			for(i=1;i<=NF;i++)
				print $i
		}
	' /bedrock/etc/brclients.conf
}

# print shared frame in a client (ignores frames), used by s()
get_client_frames(){
	awk '
		/^\s*\[client "'$1'"\]\s*$/{
			INSECTION=1
		}
		/^\s*\[(client|framework) ".*"\]\s*$/ && $2 != "\"'$1'\"]"{
			INSECTION=""
		}
		/^[ \t]*framework[ \t]*=/ && INSECTION == 1{
			$1=""
			$2=""
			print $0
		}
	' /bedrock/etc/brclients.conf
}

# print shared items for client requested client
s(){
	if [ -z $1 ]
	then
		CLIENTS=$(n)
	else
		CLIENTS="$@"
	fi
	for CLIENT in $CLIENTS
	do
		get_client_shares $CLIENT
		for FRAME in $(get_client_frames $CLIENT)
		do
			get_frame_shares $FRAME
		done
	done
}

# Cache -n and -p values to speed up future requests (requires root)
c(){
	if [ $(id -u) -ne 0 ]
	then
		echo '-c requires root'
	else
		# remove old cache so it does not influence the n and p functions
		if [ -r "/etc/br_client_name" ]
		then
			rm "/etc/br_client_name"
		fi
		# can't seem to direct the output of n or p into a file which it
		# parses, so temporarily store it into a variable.
		CLIENT_NAME=$(n)
		CLIENT_PATH=$(p)
		(
			echo "$CLIENT_NAME"
			echo "$CLIENT_PATH"
		) > /etc/br_client_name
		chmod 644 /etc/br_client_name
		echo "Saved into /etc/br_client_name:"
		cat /etc/br_client_name
	fi
}

# print the client which provides the command(s) in the argument(s) if not available locally
w(){
	for CMD in "$@"
	do
		if [ -x /bedrock/brpath/bin/$CMD ]
		then
			basename $(readlink /bedrock/brpath/bin/$CMD)
		elif [ -x /bedrock/brpath/sbin/$CMD ]
		then
			basename $(readlink /bedrock/brpath/sbin/$CMD)
		else
			echo "Cannot find $CMD"
		fi
	done
}

# print the client which provides the command(s) in the argument(s)
W(){
	for CMD in "$@"
	do
		if ! which "$CMD" >/dev/null
		then
			echo "Cannot find $CMD"
		elif ! which "$CMD" | grep -q "^/bedrock/brpath"
		then
			w "$CMD"
		else
			echo $(bri -n)
		fi
	done
}

# parse arguments
case "$1" in
	-h)
		h;;
	--help)
		h;;
	"")
		h;;
	-l)
		l;;
	-n)
		n;;
	-p)
		shift
		p $@;;
	-s)
		shift
		s $@;;
	-w)
		shift
		w $@;;
	-W)
		shift
		W $@;;
	-c)
		c;;
	*)
		h;;
esac
