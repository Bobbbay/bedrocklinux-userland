#!/bin/sh
### Bedrock Linux 1.0alpha3 Bosco
### rcS init script

# get settings from /bedrock/etc/rc.conf
. /bedrock/etc/rc.conf

# explicitly set PATH
PATH="/bedrock/bin:/bin:/sbin:/usr/bin:/usr/sbin"

clear
echo -ne "\033[0;37m"
echo "__          __             __      "
echo "\ \_________\ \____________\ \___  "
echo " \  _ \  _\ _  \  _\ __ \ __\   /  "
echo "  \___/\__/\__/ \_\ \___/\__/\_\_\ "
echo "       Bedrock Linux 1.0alpha3 Momo"
echo -ne "\033[0m"

announce(){
	printf "%-60s" "$1"
}
result(){
	if [ $? -eq 0 ]
	then
		echo -e "\033[0;32mOKAY\033[0m"
	else
		echo -e "\033[0;31mFAILED\033[0m"
	fi
}
initrdset(){
		echo -e "\033[0;32mINITRD SET\033[0m"
}

announce "Preparing /proc..."
if grep -q "^\w\+ /proc proc" /proc/mounts 2>/dev/null
then
	initrdset
else
	mount -t proc proc /proc
	result
fi

announce "Preparing /sys..."
if grep -q "^\w\+ /sys sysfs" /proc/mounts
then
	initrdset
else
	mount -t sysfs sysfs /sys
	result
fi

if [ "$DEVICE_MANAGER" = "initrd" ]
then
	announce "Using initrd's /dev"
	initrdset
else
	# attempt to undo a initrd's device manager work
	UDEVPIDS=$(ps | grep udev | grep -v grep | cut -d' ' -f2 | xargs)
	if [ -n "$UDEVPIDS" ]
	then
		announce "Removing initrd's udev..."
		kill $UDEVPIDS
		sleep 1s
		UDEVPIDS=$(ps | grep udev | grep -v grep | cut -d' ' -f2 | xargs)
		if [ -n "$UDEVPIDS" ]
		then
			kill -9 $UDEVPIDS
			sleep 1s
		fi
		if [ -n "$(ps | grep udev | grep -v grep)" ]
		then
			eval /bin/false; result
		else
			eval /bin/true; result
		fi
	fi 
	echo "" > /proc/sys/kernel/hotplug
	echo "" > /sys/kernel/uevent_helper
fi

if [ "$DEVICE_MANAGER" != "static" ] && [ "$DEVICE_MANAGER" != "initrd" ]
then
	announce " Static /dev or using initrd's /dev, no more work needed"
	result
else
	announce "Preparing /dev"
	if grep -q "^\w\+ /dev tmpfs" /proc/mounts
	then
		initrdset
	else
		mount -w -t tmpfs tmpfs -o mode=755 /dev
		result
	fi
	announce "Preparing /dev/pts"
	if grep -q "^\w\+ /dev/pts devpts" /proc/mounts
	then
		initrdset
	else
		mkdir -p /dev/pts
		mount -w -t devpts devpts -o mode=620 /dev/pts
		result
	fi
	announce "Preparing /dev/shm"
	if grep -q "^\w\+ /dev/shm tmpfs" /proc/mounts
	then
		initrdset
	else
		mkdir -p /dev/shm
		mount -w -t tmpfs tmpfs -o mode=777 /dev/shm
		result
	fi
	announce "Populating /dev"
	mdev -s
	result
fi

announce "Preparing swap..."
swapon -a
result

announce "Checking filesystems..."
RESULT=/bin/true
ROOT_FS_TYPE=$(cat /proc/mounts | awk '$1 == "/dev/root" && $2 == "/" {print$3}')
ROOT_DEVICE=/dev/$(readlink /dev/root)
echo ""
if [ "$FSCK" != 1 ]
then
	echo "FSCK=1 in rc.conf, skipping fsck"
elif [ -f /fastboot ] || grep -i -q -w "fastboot" /proc/cmdline
then
	echo "fastboot requested, skipping fsck"
elif [ -f /forcefsck ] || grep -i -q -w "forcefsck" /proc/cmdline
then
	echo "forcefsck requested, forcing fsck"
	mount / -o remount,ro || RESULT=/bin/false          || RESULT=/bin/false
	fsck -a -C0 -f -t "$ROOT_FS_TYPE" -T "$ROOT_DEVICE" || RESULT=/bin/false
	fsck -a -A -C0 -f -T                                || RESULT=/bin/false
else
	mount / -o remount,ro || RESULT=/bin/false       || RESULT=/bin/false
	fsck -a -C0 -t "$ROOT_FS_TYPE" -T "$ROOT_DEVICE" || RESULT=/bin/false
	fsck -a -A -C0 -T                                || RESULT=/bin/false
fi
eval $RESULT
result

announce "Preparing root filesystem..."
mount / -o remount,rw
result

announce "Preparing /etc/fstab filesystems..."
mount -a
result

announce "Cleaning temporary files..."
RESULT=/bin/true
if [ -f /forcefsck ]
then
	rm /forcefsck || RESULT=/bin/false
fi
if [ "$(ls -A /tmp)" != "" ]
then
	find /tmp -mindepth 1 -exec rm -rf {} \; 2>/dev/null
	[ "$(ls -A /tmp)" = "" ] || $RESULT=/bin/false
fi
eval $RESULT
result

announce "Preparing clock..."
RESULT=/bin/true
if [ -z "$TZ" ]
then
	echo ""
	echo "TZ not set in /etc/rc.conf, defaulting to UTC"
	RESULT=/bin/false
else
	export TZ
fi
if [ "$HWCLOCK" = "LOCAL" ]
then
	hwclock -ls
elif [ "$HWCLOCK" = "UTC" ]
then
	hwclock -us
else
	echo ""
	echo "HWCLOCK not set in /etc/rc.conf, defaulting to UTC"
	RESULT=/bin/false
	hwclock -us
fi
eval $RESULT
result

announce "Preparing PRNG..."
if [ -f /proc/sys/kernel/random/poolsize ]
then
	POOLSIZE=$(cat /proc/sys/kernel/random/poolsize)
else
	POOLSIZE=512
fi
if [ ! -f /var/lib/urandom/random-seed ]
then
	echo "No PRNG seed found."
	echo "  If this takes more than a second"
	echo "  you may need to type nonsense into the"
	echo "  keyboard to generate entropy."
	echo "Creating new seed from /dev/random"
	mkdir -p /var/lib/urandom 2>/dev/null
	dd if=/dev/random of=/var/lib/urandom/random-seed bs=$POOLSIZE count=1 2>/dev/null
fi
dd if=/var/lib/urandom/random-seed of=/dev/urandom bs=$POOLSIZE count=1 2>/dev/null
result

announce "Setting up client shared items..."
RESULT=/bin/true
if [ -n "$(bri -l)" ]
then
	for CLIENT in $(bri -l)
	do
		DIRECTORY=$(bri -p $CLIENT)
		for SHARE in $(bri -s $CLIENT)
		do
			echo "mount --bind $SHARE $DIRECTORY$SHARE" || RESULT=/bin/false
			echo "mount --make-shared $DIRECTORY$SHARE" || RESULT=/bin/false
		done
	done
fi
eval $RESULT
result

announce "Preparing device manager..."
if [ "$DEVICE_MANAGER" = "udev" ]
then
	if brc -l | grep -q "^$UDEV_CLIENT$"
	then
		brc $UDEV_CLIENT udevd --daemon                                 || RESULT=/bin/false
		brc $UDEV_CLIENT udevadm trigger --action=add --type=subsystems || RESULT=/bin/false
		brc $UDEV_CLIENT udevadm trigger --action=add --type=devices    || RESULT=/bin/false
		brc $UDEV_CLIENT udevadm settle                                 || RESULT=/bin/false
	else
		if which udevd >/dev/null && which udevadm >/dev/null
		then
			udevd --daemon                                 || RESULT=/bin/false
			udevadm trigger --action=add --type=subsystems || RESULT=/bin/false
			udevadm trigger --action=add --type=devices    || RESULT=/bin/false
			udevadm settle                                 || RESULT=/bin/false
		else
			RESULT=/bin/false
		fi
	fi
elif [ "$DEVICE_MANAGER" = "mdev" ]
then
	echo /sbin/mdev > /proc/sys/kernel/hotplug || RESULT=/bin/false
fi
eval $RESULT
result

announce "Running client init scripts..."
sh /etc/init.d/rcS.clients
result

announce "Running /etc/rc.local..."
sh /etc/rc.local
result

