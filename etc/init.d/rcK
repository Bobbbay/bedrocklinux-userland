#!/bin/sh
# Bedrock Linux 1.0alpha2 Momo Shutdown Script

PATH="/bin:/sbin:/usr/bin:/usr/sbin"

clear
chvt 1
echo -ne "\033[0;37m"
echo "__          __             __      "
echo "\ \_________\ \____________\ \___  "
echo " \  _ \  _\ _  \  _\ __ \ __\   /  "
echo "  \___/\__/\__/ \_\ \___/\__/\_\_\ "
echo "       Bedrock Linux 1.0alpha2 Momo"
echo -ne "\033[0m"

announce(){
	printf "%-60s" "$1"
}
result(){
	if [ $? -eq 0 ]
	then
		echo -e "\033[0;32mOKAY\033[0m"
	else
		echo -e "\033[0;31mFAILED\033[0m"
	fi
}

announce "Running client shutdown scripts... "
sh /etc/init.d/rcK.clients
result

announce "Killing all running processes... "
for i in $(seq 1 10)
do
	killall5 -15
done
for i in $(seq 1 10)
do
	killall5 -9
done
result

announce "Saving PRNG..."
if [ -f /proc/sys/kernel/random/poolsize ]
then
	POOLSIZE=$(cat /proc/sys/kernel/random/poolsize)
else
	POOLSIZE=512
fi
dd if=/dev/urandom of=/var/lib/urandom/random-seed bs=$POOLSIZE count=1 2>/dev/null
result

announce "Cleaning temporary files..."
RESULT=/bin/true
find /tmp -mindepth 1 -exec rm -rf {} \; 2>/dev/null
if [ "$(ls -A /tmp)" != "" ]
then
	RESULT=/bin/false
fi
eval $RESULT
result

announce "Unmounting all filesystems..."
echo ""
RESULT=/bin/true
# Try to unmount everything except proc (as proc is needed to get mount
# information). If some things failed to unmount, it could be because they had
# other things bind-mounted into them.  Keep looping until we've found we're no
# longer making progress with unmounting.
MOUNT_COUNT=$(expr $(cat /proc/mounts | wc -l) + 1)
MOUNT_DIGITS="$(printf $MOUNT_COUNT | wc -c)"
while [ "$(cat /proc/mounts | wc -l)" -lt "$MOUNT_COUNT" ]
do
	MOUNT_COUNT=$(cat /proc/mounts | wc -l)
	printf "Remaining mount points: %0${MOUNT_DIGITS}d\r" "$MOUNT_COUNT"
	for MOUNT in $(cat /proc/mounts | awk '$2 != "/proc" {print $2}' | sort -r)
	do
		umount $MOUNT
	done
done
# if some things still fail to unmount, mount as read-only
if [ $(cat /proc/mounts | wc -l) -gt 3 ]
then
	RESULT=/bin/false
	echo ""
	echo "Not all filesystems successfully unmounted, mounting remaining"
        echo "mount points as read-only"
	/bin/sh
	for MOUNT in $(cat /proc/mounts | awk '$2 != "/proc" {print $2}' | sort -r)
	do
		echo "Mounting $MOUNT as read-only"
		umount -r $MOUNT
	done
else
	# We're being optimistic that the remaining mounts go successfully.  The
	# all-zeros is more reassuring than the random-seeming 3 that would otherwise
	# be printed during the final seconds of the shutdown procedure.
	printf "Remaining mount points: %0${MOUNT_DIGITS}d\n" "0"
fi
# Unmount /proc and root directory now that they are no longer needed.
umount /proc
umount /
umount /
eval $RESULT
result
