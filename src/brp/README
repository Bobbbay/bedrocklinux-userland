brp ("BedRock Path")
====================

This program mounts a filesystem which provides the "implicit path"
functionality for Bedrock Linux.  Specifically, it:

 - Unions files and directories together.  If any of the directories contain a
   file, it is available here.  This can be used, for example, to ensure man
   can see man pages placed in a variety of locations.
 - Modifies files to handle Bedrock Linux local context issues.  For example,
   executables in directories such as /usr/bin are wrapped in Bedrock Linux's
   brc utility.
 - Modifies symbolic links to handle the new mount point.
 - Is (baring the /reparse_config file) entirely read-only.
 - The contents are updated on-the-fly and/or in-the-background so whenever a
   file is accessed it is always up-to-date.
 - The filesystem can be told to reload its config on-the-fly to, for example,
   handle the addition or removal of the directories it is unioning.


Usage
-----

Typically this setup automatically before/during init and will not be directly
utilized by any individual.  If you would like to use it directly for whatever
reason:

To use (after it is properly configured), run:

    brp <mount-point>

On a typical Bedrock Linux system, this mount point is /bedrock/brpath.

To tell it to reload its configuration file and list of strata, write
(anything) to the file "reparse_config" in the location where it is mounted.
Note that the "brs" utility will do this automatically when strata are enabled
or disabled.


Configuration
-------------

brp will read the configuration file at

    /bedrock/strata/etc/brp.conf

This is an ini-style configuration file.  There are four possible section
headers, described below.

[stratum-order] should list strata, one per line.  The higher the stratum is on
the list, the higher priority it gets with respect to providing any given
requested file.  For example, if "arch" and "gentoo" both provide a file, but
"gentoo" is higher on the list, it will be "gentoo"'s which is provided.

[pass], [brc-wrap] and [exec-filter] all should have a number of key-value
pairs where the key is a directory which should appear in the mounted
filesystem and the value is a comma separated list of directories which should
be unioned.  For example,

    /man/ = /usr/local/share/man, /usr/share/man

Indicates that the root of the brp filesystem should have a directory called
"man" which contains the union of all of the "/usr/local/share/man" and
"/usr/share/man" directories in all of the strata.  Any file or directory
which appears in those directories, in any stratum, will appear in the brp
filesystem.

If the key has a trailing slash then it is considered a directory and it will
contain the union of all of the items on the right side of the equals sign.  If
it does not have a trailing slash then it is treated as a file and the first
file found on the right side of the equals sign will provide the file contents.

If the value on the right side of the equals sign is simply a file path, every
strata's instance of that path will be searched as a possible input source.
If a stratum name is just before the path, delimited by a colon, then only that
stratum's files will be searched.  This is useful to ensure that a given
program always comes from one stratum.  For example, the stratum that provides
init/pid1 should also provide "reboot".

The difference between [pass], [brc-wrap] and [exec-filter] is that the former
passes files through untouched while the latter two modify the files they are
returning.

[brc-wrap] will:

- dereference all symlinks.  If any given item in a [brc-wrap] directory is a
  broken symlink it is not shown.
- The contents returned by a read() are a shell script which results in brc
  running the requested executable in the proper local context.

[exec-filter] will:

- Modify any "Exec=", "TryExec=", "ExecStart=", "ExecStop=", and/or
  "ExecRestart=" lines it sees to call the given executable through brc to
  properly change context.

Example config:

    # Nothing special with this "pass" category, it just passes files through
    # untouched.
    [pass]
    /man/ = /usr/local/share/man, /usr/share/man
    /info/ = /usr/local/share/info, /usr/share/info
    /icons/ = /usr/local/share/icons, /usr/share/icons
    /firmware/ = /lib/firmware
    /zoneinfo/ = /usr/share/zoneinfo
    
    # This will wrap all items it finds in a script that calls brc to set the local
    # context.  This is important for executables to "just work".
    [brc-wrap]
    # general executables
    /bin/  = /usr/local/bin, /opt/bin, /usr/bin, /bin
    /sbin/ = /usr/local/sbin, /opt/sbin, /usr/sbin, /sbin
    
    # init-related commands
    /pin/bin/systemctl = init:/usr/bin/systemctl, init:/bin/systemctl
    /pin/bin/rc-service = init:/usr/bin/rc-service, init:/bin/rc-service
    /pin/bin/rc-status = init:/usr/bin/rc-status, init:/bin/rc-status
    /pin/bin/rc-update = init:/usr/bin/rc-update, init:/bin/rc-update

    /pin/sbin/poweroff = init:/usr/sbin/poweroff, init:/sbin/poweroff, init:/usr/bin/poweroff, init:/bin/poweroff
    /pin/sbin/reboot = init:/usr/sbin/reboot, init:/sbin/reboot, init:/usr/bin/reboot, init:/bin/reboot
    /pin/sbin/shutdown = init:/usr/sbin/shutdown, init:/sbin/shutdown, init:/usr/bin/shutdown, init:/bin/shutdown
    /pin/sbin/halt = init:/usr/sbin/halt, init:/sbin/halt, init:/usr/bin/halt, init:/bin/halt
    /pin/sbin/systemctl = init:/usr/sbin/systemctl, init:/sbin/systemctl
    /pin/sbin/rc-service = init:/usr/sbin/rc-service, init:/sbin/rc-service
    /pin/sbin/rc-status = init:/usr/sbin/rc-status, init:/sbin/rc-status
    /pin/sbin/rc-update = init:/usr/sbin/rc-update, init:/sbin/rc-update

    # if wheezy has a custom built vim, prioritize that - otherwise, fall back
    to normal locations through "/bin/" above
    /pin/bin/vim = wheezy:/opt/vim/bin/vim
    /pin/bin/vi = wheezy:/opt/vim/bin/vim
    
    # This will modify some of the fields in the freedesktop standard .desktop
    # items to fix local context issues.
    [exec-filter]
    /applications/ = /usr/local/share/applications, /usr/share/applications
    
    [stratum-order]
    # strata in the order they should be prioritized for items without specific
    # strata specified.  Note this does not have to be an exhaustive list - any
    # strata missing will be added at the end (although the order is not
    # defined).
    wheezy
    jessie
    void
    crux
    arch
    sid

Installation
------------

Bedrock Linux should be distributed with a script which handles installation,
but just in case:

The dependencies are:

- libbedrock (should be distributed with this)
- fuse

To compile, run

    make

To install into installdir, run

    make prefix=<installdir> install

Then proceed to use "setcap" to set the "cap_sys_chroot=ep" capability on the
installed brc executable.

To clean up, like usual:

    make uninstall

And finally, to remove it, run:

    make prefix=<installdir> uninstall
