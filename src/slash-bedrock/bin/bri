#!/bedrock/libexec/busybox sh
#
# bri (BedRock Information / BedRock Introspection)
#
#      This program is free software; you can redistribute it and/or
#      modify it under the terms of the GNU General Public License
#      version 2 as published by the Free Software Foundation.
#
# Copyright (c) 2012-2015 Daniel Thau <danthau@bedrocklinux.org>
#
#
# This script will provide information about Bedrock Linux subsystems
#
# Abort if accessing unassigned variable
set -u

#  -----------------------------------------------------------------------------
#  - support functions                                                         -
#  -----------------------------------------------------------------------------

abort() {
	echo "$1" >&2
	exit 1
}

# Provides the full, resolved path to all of the files *if* they resolve.  If
# an item does not resolve (e.g. dangling symlink) it is skipped.
ls_realpath() {
	for f in $1
	do
		if [ -e "$f" ]
		then
			realpath $f 2>/dev/null
		fi
	done
}

# given a pid as an argument, prints the stratum which provides the pid
#
# Note: there is a possibly faster way by readlink'ing /proc/$pid/root, except:
# - it does not differentiate between local-stratum and init
#   - this could be resolved by brc'ing to init
# - it requires root to use for another user's process
pid_stratum() {
	# pick a mount point visible by the process
	mount_number="$(head -n1 /proc/$1/mountinfo | cut -d" " -f1)"
	# find where init sees it as mounted
	init_view="$(grep "^$mount_number " /proc/1/mountinfo | cut -d' ' -f5)"
	# find where the process sees it as mounted
	stratum_view="$(grep "^$mount_number " /proc/$1/mountinfo | cut -d' ' -f5)"

	# if the process sees it mounted the same place as init does, then the
	# process is in the init stratum
	if [ "$init_view" = "$stratum_view" ]
	then
		# Report the name of the init stratum
		a init
	else
		# must be in a stratum other than init
		#
		# init will see it mounted at
		# <empty>/bedrock/stratum/<stratum-name>/something
		# |       |       |      |              \- from here on out don't care
		# |       |       |      \- stratum name
		# |       |       \- third field
		# |       \- second field
		# \- first (empty) field
		#
		# Thus, the fourth field will be the stratum.  Note that forward slashes
		# are not allowed in Linux file names.
		echo "$init_view" | cut -d'/' -f4
	fi
}

# Parses values out of strata configuration
# - First argument is the stratum
# - Second argument is the desired key (bind, share, union, etc)
# - Third argument is the desired format
#   - "first" -> only print first item per key and ignore the rest
#   - "firstreal" -> only print first item per key, filtered through "realpath"
#   relative to real root
#   - "online" -> print the config without alteration.
#   - "all" -> print all values for key, one per line
#   - "allreal" -> print all values for key, filtered through "realpath"
#   relative to real root.
#   - "last" -> prints last value for given key.
#
# Note realpath may fail in some situations, such as if the stratum is not set
# up.  In these situations the this function will fall back to printing without
# the realpath filter.

# the awkward -F is because some builds of buysbox's awk doesn't seem to like
# \t for a tab in a character class.
get_values() {
	stratum="$(a "$1")"
	if [ "$(a init)" = "$(a "$stratum")" ]
	then
		realroot=""
	else
		realroot="$(realpath /bedrock/strata/$stratum)"
	fi
	awk -v"stratum=$stratum" -v"key=$2" -v"format=$3" -v"realroot=$realroot" -F'([ ,:]|\\t)+' '
		BEGIN {
			framework_cutoff = ARGC
		}
		# hit a section header
		substr($0,1,1) == "[" {
			# is this target section?
			if ($0 == "["stratum"]") {
				in_section = 1
			} else {
				in_section = 0
			}
		}
		# if we are in a framework, it was inherited from the proper
		# section header
		ARGIND >= framework_cutoff {
			in_section = 1
		}
		# in the wrong section, ignore line
		!in_section {
			next
		}
		# find key
		$0 ~ "^[ \t]*"key"[ \t]*=[ \t]*[^ \t]" {
			# should not be necessary, but trailing separators confuses some
			# builds of busybox awk
			sub(/([ ,:]|\\t)$/,"")
			# remove "key ="
			sub("^[ \t]*"key"[ \t]*=[ \t]*","")
			# handle value per format
			if (format == "first") {
				print $1
			} else if (format == "firstreal") {
				print realroot""$1
			} else if (format == "oneline") {
				print $0
			} else if (format == "all") {
				for (i=1; i<=NF; i++) {
					print $i
				}
			} else if (format == "allreal") {
				for (i=1; i<=NF; i++) {
					print realroot""$i
				}
			} else if (format == "last") {
				value = $0
			}
		}
		# find new frameworks in the current file and add them to ARGV to
		# process
		/^[ \t]*framework[ \t]*=[ \t]*[^ \t]/ {
			# remove "framework ="
			sub(/^[ \t]*framework[ \t]*=[ \t]*/,"")
			# iterate over values (which are each awk fields)
			for (i=1; i<=NF; i++) {
				# ensure file exists
				if ($i != "" && (!($i in frameworks))) {
					# track frameworks we have processed so we do not reprocess
					# them
					frameworks[$i]
					ARGV[ARGC] = "/bedrock/etc/frameworks.d/"$i
					ARGC++
				}
			}
		}
		END {
			if (format == "last") {
				print value
			}
		}
		' /bedrock/etc/strata.conf $(ls_realpath /bedrock/etc/strata.d/*) 2>/dev/null
}

# If the item is a symlink or some other realpath change, use that.  If it
# doesn't exist, return input.
realpathfilter() {
	while read path
	do
		if ! realpath $path 2>/dev/null
		then
			echo $path
		fi
	done
}

# This simply checks to ensure sufficient arguments have been provided.
arg_count_check() {
	if [ "$1" -lt "$2" ]
	then
		echo "bri: insufficient arguments"
		echo "$1 arguments provided, at least $2 arguments expected"
		echo "see bri -h"
		exit 1
	fi
}

#  -----------------------------------------------------------------------------
#  - functions for each flag                                                   -
#  -----------------------------------------------------------------------------
#
# The functions have the same name as the corresponding flag.

# resolve aliases
a() {
	if  [ "$1" = "local" ]
	then
		n
		return
	fi
	awk -v"alias=$1" -v"resolved=$1" -F'([ ,:]|\\t)+' '
		$1 == alias {
			# should not be necessary, but trailing separators confuses some
			# builds of busybox awk
			sub(/([ ,:]|\\t)$/,"")
			# remove "key ="
			sub("^[ \t]*"alias"[ \t]*=[ \t]*","")
			resolved=$0
		}
		END {
			print resolved
		}
	' /bedrock/etc/aliases.conf $(ls_realpath /bedrock/etc/aliases.d/*)
}

# Print config values.  This is useful for:
# - end-user to check configuration is setup as desired
# - other utilities to use this rather than each read the configs with their own code
c() {
	arg_count_check "$#" "2"
	# everything but union should use "all"
	if [ "$2" = "union" ] || [ "$2" = "init" ]
	then
		get_values "$1" "$2" oneline
	elif [ "$2" = "init" ]
	then
		get_values "$1" "$2" oneline | tail -n1
	elif [ "$2" = "enable" ]
	then
		value=$(get_values "$1" "$2" last)
		# default to boot
		if [ -z "$value" ]
		then
			echo "boot"
		else
			echo "$value"
		fi
	elif [ "$2" = "alias" ]
	then
		echo get_values "$1" "$2" last >&2
		get_values "$1" "$2" last
	else
		get_values "$1" "$2" all
	fi
}

# Populates Bedrock Linux-specific /etc files
e() {
	if [ "$(id -u)" != "0" ]
	then
		abort "bri -e requires root"
	fi
	while [ -n "${1:-}" ]
	do
		mkdir -p /bedrock/strata/$1/etc/

		echo "$1 > /bedrock/strata/$1/etc/bedrock_stratum"
		echo "$1" > "/bedrock/strata/$1/etc/bedrock_stratum"
		chmod 644 "/bedrock/strata/$1/etc/bedrock_stratum"

		shift
	done
}

# print help
h() {
cat <<EOF
Usage: bri ARGUMENT

bri will provide information about Bedrock Linux subsystems.

Since a flag must be provided, and used as the first argument, there is no
ambiguity as to what is a flag; the "-" character is optional.

ARGUMENTS:
   -c   first following term must be stratum, second must be Config key.  prints
        corresponding Config values.
   -e   populates the Etc file /etc/bedrock_stratum.  This provides small
        performance improvement to following -n requests.
   -h   print this Help
   -i   print lIst of enabled strata and alIases
   -I   print lIst of all strata and alIases, enabled and disabled
   -l   print List of enabled strata
   -L   print List of all strata, enabled and disabled
   -m   print Mount points in current stratum OR following stratum name(s)
   -M   print Missing mount points in current stratum OR following stratum
        name(s)
   -n   print Name of stratum corresponding to current process
   -p   print the stratum that provides the following Process id or
        (non-numeric) Process name
   -P   print a list of Processes provided by the current stratum OR following
        stratum name(s)
   -s   print the setup Status of the current OR following stratum name(s)
   -w   print the stratum Which provides the command(s) in the argument(s)
EOF
}

# print a list of enabled strata and aliases
i() {
	cd /bedrock/run/enabled_strata
	awk '
		BEGIN {
			cmd="for x in *; do [ -f \"$x\" ] && ! [ -h \"$x\" ] && echo \"$x\"; done"
			while ((cmd | getline) > 0) {
				enabled[$0]
				print
			}
			close(cmd)
		}
		/^[ \t]*#/ {
			next
		}
		$0 ~ "^[ \t]*[^ \t][^ \t]*[ \t]*=[ \t]*[^ \t]" && $3 in enabled {
			print $1" -> "$3
		}
	' /bedrock/etc/aliases.conf $(ls_realpath /bedrock/etc/aliases.d/*)
}

# print a list of all strata and aliases, both enabled and disabled
I() {
	awk '
		/^[ \t]*#/ {
			next
		}
		/^[ \t]*\[.*\][ \t]*$/ {
			sub("^[ \t]*.", "")
			sub(".[ \t]*$", "")
			strata[$0]
		}
		END {
			for (stratum in strata) {
				print stratum
			}
		}
	' /bedrock/etc/strata.conf $(ls_realpath /bedrock/etc/strata.d/*)
	awk -F'([ ,:]|\\t)+' '
		/^[ \t]*#/ {
			next
		}
		$0 ~ "^[ \t]*[^ \t][^ \t]*[ \t]*=[ \t]*[^ \t]" {
			print $1" -> "$3
		}
	' /bedrock/etc/aliases.conf $(ls_realpath /bedrock/etc/aliases.d/*)
}

# print a list of enabled strata
l() {
	cd /bedrock/run/enabled_strata
	for x in *
	do
		[ -f "$x" ] && ! [ -h "$x" ] && echo "$x"
	done
}

# print a list of all strata, both enabled and disabled
L() {
	awk '
		/^[ \t]*#/ {
			next
		}
		/^[ \t]*\[.*\][ \t]*$/ {
			sub("^[ \t]*.", "")
			sub(".[ \t]*$", "")
			strata[$0]
		}
		END {
			for (stratum in strata) {
				print stratum
			}
		}
	' /bedrock/etc/strata.conf $(ls_realpath /bedrock/etc/strata.d/*)
}

# print mount points and corresponding category in specified stratum/strata
m() {
	while [ -n "${1:-}" ]
	do
		stratum="$(a "$1")"
		shift

		if [ "$(a init)" = "$(a "$stratum")" ]
		then
			is_init=true
		else
			is_init=false
		fi
		if [ "$(a init)" = "$(a global)" ]
		then
			global_is_init=true
		else
			global_is_init=false
		fi

		all_mounts="$(cat /proc/1/mountinfo)"
		# get all mount points
		if $is_init
		then
			# init's mounts are relative to the real root, not /bedrock/stratum/<stratum-name>
			mount_lines="$(awk '$5 !~ "^/bedrock/strata/[^/][^/]*/."' /proc/1/mountinfo)"
			bind_mounts=$(get_values "$stratum" "bind" "all" | realpathfilter)
			union_mounts=$(get_values "$stratum" "union" "first" | realpathfilter)
			share_mounts=$(get_values "$stratum" "share" "all" | realpathfilter)
			unmanaged_mounts=$(get_values "$stratum" "unmanaged" "all" | realpathfilter)
		else
			mount_lines=$(awk -v"stratum=${stratum}" '$5 ~ "^/bedrock/strata/"stratum"(/|$)"' /proc/1/mountinfo)
			bind_mounts=$(get_values "$stratum" "bind" "allreal" | realpathfilter)
			union_mounts=$(get_values "$stratum" "union" "firstreal" | realpathfilter)
			share_mounts=$(get_values "$stratum" "share" "allreal" | realpathfilter)
			unmanaged_mounts=$(get_values "$stratum" "unmanaged" "allreal" | realpathfilter)
		fi

IFS="
"
		for mount_line in $mount_lines
		do
			# Gather useful here.  Makes if/else tree later easier to read.
			# However, it calculates things which may not be necessary and
			# slows things down.  TODO: consider refactor for performance
			# benefit.
			mount_point=$(echo $mount_line | cut -d' ' -f5)
			if $is_init && $global_is_init
			then
				global_equivalent_mount_point=$mount_point
			elif $is_init && ! $global_is_init
			then
				global_equivalent_mount_point=/bedrock/strata/$(a global)$mount_point
			elif ! $is_init && $global_is_init
			then
				global_equivalent_mount_point=/$(echo $mount_point | cut  -d/ -f5-)
			else # ! $is_init && ! $global_is_init
				global_equivalent_mount_point=/bedrock/strata/$(a global)/$(echo $mount_point | cut -d/ -f5-)
			fi
			mount_point_stat="$(brc init /bedrock/libexec/busybox stat $mount_point 2>/dev/null | awk 'NR>1')"
			global_equivalent_mount_point_stat="$(brc init /bedrock/libexec/busybox stat $global_equivalent_mount_point 2>/dev/null | awk 'NR>1')"
			fs_type=$(echo "$mount_line" | awk '{
				for (i=7; i<NF; i++) {
					if ($i == "-") {
						print$(i+1)
						exit
					}
				}
			}')
			shared=$(echo "$mount_line" | awk '{
				for (i=7; i<NF; i++) {
					if ($i ~ "^shared:[0-9][0-9]*"){
						print "true"
						exit
					} else if ($i == "-"){
						print "false"
						exit
					}
				}
			}')

			# determine the expected mount type
			if echo "$bind_mounts" | grep -q "^$mount_point$"
			then
				expected_type="bind"
			elif echo "$union_mounts" | grep -q "^$mount_point$"
			then
				expected_type="union"
			elif echo "$share_mounts" | grep -q "^$mount_point$"
			then
				expected_type="share"
			elif echo "$unmanaged_mounts" | grep -q "^$mount_point$"
			then
				expected_type="unmanaged"
			else
				expected_type="other"
				for shared_mount in $share_mounts
				do
					if echo "$mount_point" | grep -q "^$shared_mount/"
					then
						expected_type="subshare"
						break
					fi
				done
			fi

			# determine actual mount type
			if echo "$unmanaged_mounts" | grep -q "^$mount_point$"
			then
				found_type="unmanaged"
			elif $shared && [ "$expected_type" != "subshare" ]
			then
				found_type="share"
			elif $shared && [ "$expected_type" == "subshare" ]
			then
				found_type="subshare"
			elif [ "$mount_point_stat" = "$global_equivalent_mount_point_stat" ]
			then
				found_type="bind"
			elif [ "$fs_type" = "fuse.bru" ]
			then
				found_type="union"
			else
				found_type="other"
			fi

			# print output
			if [ "$expected_type" = "other" ] || [ "$expected_type" = "subshare" ] || [ "$expected_type" = "unmanaged" ]
			then
				match="okay"
			elif [ "$found_type" = "$expected_type" ]
			then
				match="good"
			else
				match="expected: $expected_type/bad"
			fi

			if $is_init
			then
				echo "$mount_point ($found_type/$match)"
			else
				echo "/$(echo $mount_point | cut -d/ -f5- ) ($found_type/$match)"
			fi
		done
	done
}

# print missing mount points
M() {
	while [ -n "${1:-}" ]
	do
		stratum="$(a "$1")"
		shift

		if [ "$(a init)" = "$(a "$stratum")" ]
		then
			is_init=true
		else
			is_init=false
		fi
		if [ "$(a init)" = "$(a global)" ]
		then
			global_is_init=true
		else
			global_is_init=false
		fi
		all_mounts="$(cat /proc/1/mountinfo)"
		# get all mount points
		if $is_init
		then
			# init's mounts are relative to the real root, not /bedrock/stratum/<stratum-name>
			mount_points=$(awk '$5 !~ "^/bedrock/strata/[^/][^/]*/." {print$5}' /proc/1/mountinfo)
			bind_mounts=$(get_values "$stratum" "bind" "all" | realpathfilter)
			union_mounts=$(get_values "$stratum" "union" "first" | realpathfilter)
			share_mounts=$(get_values "$stratum" "share" "all" | realpathfilter)
			unmanaged_mounts=$(get_values "$stratum" "unmanaged" "all" | realpathfilter)
		else
			mount_points=$(awk '$5 ~ "^/bedrock/strata/'"${stratum}"'(/|$)" {print$5}' /proc/1/mountinfo)
			bind_mounts=$(get_values "$stratum" "bind" "allreal" | realpathfilter)
			union_mounts=$(get_values "$stratum" "union" "firstreal" | realpathfilter)
			share_mounts=$(get_values "$stratum" "share" "allreal" | realpathfilter)
			unmanaged_mounts=$(get_values "$stratum" "unmanaged" "allreal" | realpathfilter)
		fi

IFS="
"
		for bind_mount in $bind_mounts
		do
			if ! echo "$mount_points" | grep -q "^$bind_mount$"
			then
				if $is_init
				then
					echo "$bind_mount (expected bind)"
				else
					echo "/$(echo $bind_mount | cut -d/ -f5-) (expected bind)"
				fi
			fi
		done
		for share_mount in $share_mounts
		do
			if ! echo "$mount_points" | grep -q "^$share_mount$"
			then
				if $is_init
				then
					echo "$share_mount (expected share)"
				else
					echo "/$(echo $share_mount | cut -d/ -f5-) (expected share)"
				fi
			fi
		done
		for union_mount in $union_mounts
		do
			if ! echo "$mount_points" | grep -q "^$union_mount$"
			then
				if $is_init
				then
					echo "$union_mount (expected union)"
				else
					echo "/$(echo $union_mount | cut -d/ -f5-) (expected union)"
				fi
			fi
		done
	done
}

# find the stratum that we're currently in
n() {
	# if cached value, use that for tiny (0.025s -> 0.007s) performance boost
	if [ -r /etc/bedrock_stratum ]
	then
		cat /etc/bedrock_stratum
	else
		pid_stratum $$
	fi
}

# find the stratum that provides the specified process by pid or (non-numeric)
# name
p() {
	while [ -n "${1:-}" ]
	do
		if echo "$1" | grep -q "^[0-9]*$"
		then
			pids="$1"
		else
			pids="$(pidof $1)"
		fi
		mentioned=" "
		for pid in $(echo $pids)
		do
			echo "$pid $(cat /proc/$pid/comm) ($(pid_stratum $pid))"
		done
		shift
	done
}

# print the pids all of the processes that are currently being provided by a
# stratum
P() {
	while [ -n "${1:-}" ]
	do
		stratum="$(a "$1")"
		for pid in $(ls /proc | grep "^[0-9]*$")
		do
				# only want process that are not a zombie or kernel process and
				# are in the stratum for which we're looking.
				if [ -n "$(cat /proc/$pid/cmdline)" ] && \
					[ "$(pid_stratum $pid)" = "$stratum" ]
				then
					echo "$pid $(cat /proc/$pid/comm) ($(pid_stratum $pid))"
				fi
		done 2>/dev/null # pids can disappear on us mid-run
		shift
	done
}

# print stratum status
s() {
	while [ -n "${1:-}" ]
	do
		stratum="$(a ${1})"
		shift

		# figure out if stratum is configured as enabled or disabled
		if [ -e "/bedrock/run/enabled_strata/$stratum" ]
		then
			enable_status="enabled"
		else
			enable_status="disabled"
		fi

		# generalize mount status as one of the following:
		# - problematic mounts
		# - fully mounted
		# - no expected mounts
		# - partially mounted
		mounts="$(m $stratum)"
		goal_expected_mounts="$(
			(
				get_values "$stratum" "bind" "allreal"
				get_values "$stratum" "share" "allreal"
				get_values "$stratum" "union" "firstreal"
			) | sort | uniq
		)"
		if [ -z "$goal_expected_mounts" ]
		then
			goal_expected_mount_count="0"
		else
			goal_expected_mount_count="$(echo "$goal_expected_mounts" | wc -l)"
		fi
		found_expected_mounts="$(echo "$mounts" | grep '/good)$' | sort | uniq)"
		if [ -z "$found_expected_mounts" ]
		then
			found_expected_mount_count="0"
		else
			found_expected_mount_count="$(echo "$found_expected_mounts" | wc -l)"
		fi
		found_problem_mounts="$(echo "$mounts" | grep -v '/good)$' | grep -v "/okay)$")"
		if [ -z "$found_problem_mounts" ]
		then
			found_problem_mount_count="0"
		else
			found_problem_mount_count="$(echo "$found_problem_mounts" | wc -l)"
		fi

		if [ -n "$found_problem_mounts" ]
		then
			mount_status="problematic mounts"
		elif [ "$found_expected_mount_count" -eq "$goal_expected_mount_count" ]
		then
			mount_status="fully mounted ($found_expected_mount_count/$goal_expected_mount_count)"
		elif [ "$goal_expected_mount_count" -eq 0 ]
		then
			mount_status="no expected mounts ($found_expected_mount_count/$goal_expected_mount_count)"
		elif [ "$found_expected_mount_count" -gt "$goal_expected_mount_count" ]
		then
			mount_status="too many mounts, improperly enabled ($found_expected_mount_count/$goal_expected_mount_count)"
		else
			mount_status="missing mounts ($found_expected_mount_count/$goal_expected_mount_count)"
		fi

		echo "$stratum: $enable_status, $mount_status"
	done
}

# print stratum which provides command
w() {
	while [ -n "${1:-}" ]
	do
		loc=$(which $1)
		if [ "$?" -ne 0 ]
		then
			# could not find the executable
			echo "(nonexistent)"
		elif echo "$loc" | grep -q "^/bedrock/bin/" || \
			echo "$loc" | grep -q "^/bedrock/sbin/"
		then
			# if the executable is in /bedrock/{bin,sbin} then it is being
			# accessed directly without brc, but isn't technically part of the
			# local stratum, either.
			echo "(bedrock)"
		elif echo "$loc" | grep -q "^/bedrock/brpath/"
		then
			# if the executable is in /bedrock/brpath, then it is being
			# provided by another stratum through the brc/brp.  Each of the
			# items in the brp path are shell script wrappers which call brc
			# for the given file.  The location of the stratum brc is to use is
			# constant; we can read that.
			awk 'NR==2{print $3" (implicit)"}' "$loc"
		else
			# if none of the above situations is true, then the command is
			# being provided directly.  However, we still have to determine if
			# it is local or global.
			echo "$(n) (direct)"
		fi
		shift
	done
}

#  -----------------------------------------------------------------------------
#  - execution starts here                                                     -
#  -----------------------------------------------------------------------------
# This will brc to init. To avoid directory jump warnings, cd to the root.
cd /

# Parse arguments and call corresponding function.

if [ "$#" -eq 0 ]
then
	abort "bri: no argument provided, see bri -h"
fi

flag=$1 # store flag that we'll use later
shift
extraargs="$@"
if [ -z "$extraargs" ]
then
	# -p and -w require additional args to work
	if [ "$flag" = "p" ] || [ "$flag" = "-p" ]\
		|| [ "$flag" = "w" ] || [ "$flag" = "-w" ]\
		|| [ "$flag" = "a" ] || [ "$flag" = "-a" ]
	then
		abort "bri: additional arguments required, see bri -h"
	fi
	# Most flags which can take following args default to the current stratum if
	# no more args are provided.  If there are no more args, "fake" a following
	# arg as the default/current stratum.
	extraargs=$(n)
fi

case "$flag" in
	"-a"|"a")
		a $extraargs;;
	"-c"|"c")
		c $extraargs;;
	"-e"|"e")
		e $extraargs;;
	"-h"|"h"|"--help")
		h;;
	"-i"|"i")
		i;;
	"-I"|"I")
		I;;
	"-l"|"l")
		l;;
	"-L"|"L")
		L;;
	"-m"|"m")
		m $extraargs;;
	"-M"|"M")
		M $extraargs;;
	"-n"|"n")
		n;;
	"-p"|"p")
		p $extraargs;;
	"-P"|"P")
		P $extraargs;;
	"-s"|"s")
		s $extraargs;;
	"-w"|"w")
		w $extraargs;;
	*)
		abort "bri: illegal argument provided, see bri -h";;
esac
