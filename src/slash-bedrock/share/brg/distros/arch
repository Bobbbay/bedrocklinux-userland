#!/bin/sh

MIRROR_LIST_URL='https://www.archlinux.org/mirrorlist/all/'

list_releases() {
	echo "rolling (DEFAULT)"
}

list_regions() {
	trap 'abort "Unable to get or parse mirror list at \"$MIRROR_LIST_URL\""' EXIT
	wget -O- "$MIRROR_LIST_URL" 2>/dev/null | awk '/^##/ && NR > 4 {print substr($0, 4)}'
}

list_mirrors() {
	trap 'abort "Unable to get or parse mirror list at \"$MIRROR_LIST_URL\""' EXIT
	if [ -n "$REGION" ]
	then
		wget -O- "$MIRROR_LIST_URL" 2>/dev/null | awk -vregion="$REGION" '/^## /{sub("## ", "", $0); current_region=$0} current_region==region && NR>4 {gsub("/.repo/os/.arch$", "/", $3); if ($3 != "") print $3}'
	else
		wget -O- "$MIRROR_LIST_URL" 2>/dev/null | awk 'NR>4 && /^#[^#]/ {gsub("/.repo/os/.arch$", "/", $3); if ($3 != "") print $3}'
	fi
}

get() {
	trap 'abort "Error occurred executing step"' EXIT
	CLEAN_UP=""
	steps=18

	progress 1 "$steps" "Determining stratum name"
	NAME="${NAME:-arch}"
	notice "Using \"$NAME\""

	config="$STRATACONFDIR/$NAME.conf"
	target_dir="$STRATADIR/$NAME"
	bootstrap_dir="$STRATADIR/$NAME/bootstrap"
	ARCHITECTURE=$(uname -m)

	progress 2 "$steps" "Performing sanity checks"
	if [ "$(id -u)" != "0" ]
	then
		abort "Requires root"
	fi
	if [ -n "$RELEASE" ] && [ "$RELEASE" != "rolling" ]
	then
		abort "Unsupported release specified"
	fi
	if [ -z "$NAME" ]
	then
		abort "Name is empty; this is disallowed"
	fi
	if [ -e "$target_dir" ]
	then
		abort "Something already exists at \"$target_dir\".  This could be another stratum, thus aborting.  If it is just temporary files from prior, failed brg attempt, remove then re-run brg."
	fi
	if [ -e "$config" ]
	then
		abort "Something already exists at \"$config\".  This could be another stratum, thus aborting.  If it is just temporary files from prior, failed brg attempt, remove then re-run brg."
	fi

	progress 3 "$steps" "Determining mirror"
	if [ -z "$MIRROR" ]
	then
		MIRROR=$(netselect -v $(list_mirrors) | awk '{print$2}')
	fi
	notice "Using \"$MIRROR\""

	progress 4 "$steps" "Finding bootstrap tarball URL"
	FILENAME_REGEX="^archlinux-bootstrap-[^-]*-${ARCHITECTURE}[.]tar[.]gz"
 	notice "Architecture is $ARCHITECTURE; expected file name matches $FILENAME_REGEX"
	BOOTSTRAP_TOOL_DIR="$MIRROR/iso/latest"
	BOOTSTRAP_TOOL_URL="$(get_file_url_from_http_index "$BOOTSTRAP_TOOL_DIR" "$FILENAME_REGEX")"
	[ -z "$BOOTSTRAP_TOOL_URL" ] && abort "Unable to find expected filename in index.  Could be transient issue with mirror, could be bug in brg, possibly this architecture ($ARCHITECTURE) is not supported by this distro and thus does not show up in the mirror.  Double check this distro supports $ARCHITECTURE and try again, maybe with another mirror."
	notice "Using \"$BOOTSTRAP_TOOL_URL\""

	progress 5 "$steps" "Making directory structure"
	CLEAN_UP="less_lethal_rm_rf \"$target_dir\""
	mkdir -p "$target_dir" "$bootstrap_dir"
	chmod a+rx "$target_dir" "$bootstrap_dir"

	progress 6 "$steps" "Acquiring bootstrap tarball"
	wget -O "$bootstrap_dir/bootstrap.tar.gz" "$BOOTSTRAP_TOOL_URL"

	progress 7 "$steps" "Extracting bootstrap tarball"
	(cd $bootstrap_dir && tar xf bootstrap.tar.gz)
	mv "$bootstrap_dir"/root.*/* "$bootstrap_dir"
	rmdir $bootstrap_dir/root.*
	rm "$bootstrap_dir/bootstrap.tar.gz"

	progress 8 "$steps" "Preparing bootstrap chroot"
	CLEAN_UP="tear_down_chroot \"$bootstrap_dir\"; less_lethal_rm_rf \"$target_dir\""
	setup_chroot "$bootstrap_dir"

	progress 9 "$steps" "Preparing bootstrap pacman (typing in another window or moving mouse may hasten this step)"
	LANG=C chroot "$bootstrap_dir" /usr/bin/pacman-key --init
	LANG=C chroot "$bootstrap_dir" /usr/bin/pacman-key --populate archlinux
	echo "### Set by Bedrock Linux when acquiring this stratum" >> "$bootstrap_dir/etc/pacman.d/mirrorlist"
	echo "Server = $MIRROR"'/$repo/os/$arch' >> "$bootstrap_dir/etc/pacman.d/mirrorlist"
	sed 's/^CheckSpace/### CheckSpace disabled by Bedrock Linux when acquiring this stratum\n# CheckSpace/' "$bootstrap_dir/etc/pacman.conf" > "$bootstrap_dir/etc/pacman.conf-brg-temp"
	mv "$bootstrap_dir/etc/pacman.conf-brg-temp" "$bootstrap_dir/etc/pacman.conf"

	progress 10 "$steps" "Pacstraping base"
	CLEAN_UP="umount \"$bootstrap_dir/target-root\"; tear_down_chroot \"$bootstrap_dir\"; less_lethal_rm_rf \"$target_dir\""
	mkdir "$bootstrap_dir/target-root"
	mount --bind "$target_dir" "$bootstrap_dir/target-root"
	LANG=C chroot "$bootstrap_dir" pacstrap "/target-root" base
	umount "$bootstrap_dir/target-root"
	CLEAN_UP="tear_down_chroot \"$bootstrap_dir\"; less_lethal_rm_rf \"$target_dir\""

	progress 11 "$steps" "Tearing down bootstrap chroot environment"
	tear_down_chroot "$bootstrap_dir"
	CLEAN_UP="less_lethal_rm_rf \"$target_dir\""

	progress 12 "$steps" "Removing bootstrap files"
	less_lethal_rm_rf "$bootstrap_dir"

	progress 13 "$steps" "Preparing chroot"
	CLEAN_UP="tear_down_chroot \"$target_dir\"; less_lethal_rm_rf \"$target_dir\""
	setup_chroot "$target_dir"

	progress 14 "$steps" "Preparing pacman (typing in another window or moving mouse may hasten this step)"
	LANG=C chroot "$target_dir" /usr/bin/pacman-key --init
	LANG=C chroot "$target_dir" /usr/bin/pacman-key --populate archlinux
	echo "### Set by Bedrock Linux when acquiring this stratum" >> "$target_dir/etc/pacman.d/mirrorlist"
	echo "Server = $MIRROR"'/$repo/os/$arch' >> "$target_dir/etc/pacman.d/mirrorlist"
	sed 's/^CheckSpace/### CheckSpace disabled by Bedrock Linux when acquiring this stratum\n# CheckSpace/' "$target_dir/etc/pacman.conf" > "$target_dir/etc/pacman.conf-brg-temp"
	mv "$target_dir/etc/pacman.conf-brg-temp" "$target_dir/etc/pacman.conf"

	progress 15 "$steps" "Installing specified packages"
	if [ -n "$INCLUDE_PACKAGES" ]
	then
		# it appears yes always returns non-zero, baring --help.  Need to disable pipefail.
		set +o pipefail
		yes "" | LANG=C chroot "$target_dir" /usr/bin/pacman -S $(echo "$INCLUDE_PACKAGES" | sed 's/,/ /g')
		set -o pipefail
	else
		notice "No extra packages specified"
	fi

	progress 16 "$steps" "Preparing locale"
	if [ -n "$LANG" ] && [ "$LANG" != "C" ]
	then
		echo "### Added by Bedrock Linux when acquiring this stratum" >> "$target_dir/etc/locale.gen"
		echo "$LANG UTF-8" >> "$target_dir/etc/locale.gen"
		LANG=C chroot "$target_dir" locale-gen
	else
		echo "Warning: Could not determine desired locale, skipping setting locale"
	fi

	progress 17 "$steps" "Tearing down chroot environment"
	tear_down_chroot "$target_dir"
	CLEAN_UP="less_lethal_rm_rf \"$target_dir\""

	progress 18 "$steps" "Creating stratum configuration"
	create_config "$target_dir" "$config"

	if [ -n "$ENABLE_AFTER_ACQUIRE" ] && $ENABLE_AFTER_ACQUIRE
	then
		notice "Enabling stratum"
		brs enable "$NAME"
	fi

	CLEAN_UP=""
	echo ""
	notice "Successfully acquired $DISTRO stratum"
}
