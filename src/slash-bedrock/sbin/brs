#!/bedrock/libexec/busybox sh
#
# brs (BedRock Setup)
#
#      This program is free software; you can redistribute it and/or
#      modify it under the terms of the GNU General Public License
#      version 2 as published by the Free Software Foundation.
#
# Copyright (c) 2012-2015 Daniel Thau <danthau@bedrocklinux.org>

# Abort if anything returns non-zero unexpectedly
# set -e
# Abort if accessing unassigned variable
set -u

help() {
cat <<EOF
Usage: brs COMMAND STRATUM

COMMANDS:

General commands:
   enable       Enables stratum.  Stratum must be disabled.
   disable      Disables stratum.  May be run on partially disabled stratum to
                complete disabling it.
   reenable     Disables then enables stratum.
   update       Enables missing mounts in stratum.  Useful to enable newly added
                strata.conf line without having to disable stratum.

These are called automatically when appropriate.  Generally you do not want to
run these directly.
   force-enable Enables stratum even if it has mount points.  Usually one should
                reenable or update instead.
   kill         Kills all processes provided by stratum.
   mount        Mounts missing mount points in stratum; alias for update.
   unmount      Unmounts all mount points in stratum.
   postdisable  Runs predisable scripts for stratum.
   postenable   Runs preenable scripts for stratum.
   predisable   Runs predisable scripts for stratum.
   preenable    Runs preenable scripts for stratum.
   fix          Iterates over all strata, fixing some mount issues.
                Stratum must be specified for uniformity but is ignored.

EOF
}

abort() {
	echo "$1" >&2
	exit 1
}

# Repeatedly call "body" while "status" shrinks in length.  If "status" stops
# shrinking, we're not making progress; stop.  Returns whether or not "status"
# was completely cleared.
repeat_down() {
	current=$(status)
	# previous is one character longer than current status to ensure at least
	# one loop
	previous="x$current"
	while [ ${#current} -gt 0 ] && [ ${#current} -lt ${#previous} ]
	do
		body
		previous="$current"
		current=$(status)
	done
	[ ${#current} -eq 0 ]
}

kill_procs() {
	stratum="$1"
	echo -n "$indent"
	echo -n "Killing processes in stratum $stratum... "

	status() {
		bri -P "$stratum" | cut -d' ' -f1 | xargs
	}
	body() {
		kill $current || sleep 2 && kill -9 $current
	}
	if ! repeat_down
	then
		echo ""
		echo "ERROR: Could not kill all processes"
		echo "See bri -P $stratum"
		return 1
	else
		echo "done"
	fi
}

unmount_stratum() {
	stratum="$1"
	echo -n "$indent"
	echo -n "Unmounting $stratum... "

	status() {
		bri -m $stratum | grep -v ".unmanaged/okay.$" | awk -v"stratum=$stratum" '{print "/bedrock/strata/"stratum"/"$1}' 2>/dev/null
	}
	body() {
		for mount in $current
		do
			mount --make-private "$mount" 2>/dev/null
			umount "$mount" 2>/dev/null
		done
	}
	if ! repeat_down
	then
		# try again with lazy umounting
		body() {
			for mount in $current
			do
				mount --make-private "$mount" 2>/dev/null
				umount -l "$mount" 2>/dev/null
			done
		}
		if ! repeat_down
		then
			echo ""
			echo "ERROR: Could not unmount all mount points"
			echo "See bri -m $stratum"
			return 1
		else
			echo "done"
		fi
	else
		echo "done"
	fi
}

ensure_mounts_exist() {
	stratum=$1
	src=$2
	dst=$3

	if [ -h "$src" ]
	then
		abort "ERROR: mounting $stratum, $src is a symlink."
	elif [ -h "$dst" ]
	then
		abort "ERROR: mounting $stratum, $dst is a symlink."
	elif [ -e "$src" ] && [ -e "$dst" ]
	then
		# both exist, nothing special needs to be done
		return 0
	elif [ -d "$src" ]
	then
		mkdir -p "$dst"
		if [ "$?" -ne 0 ]
		then
			abort "ERROR: mounting $stratum: cannot create directory at $dst"
		fi
	elif [ -d "$dst" ]
	then
		mkdir -p "$src"
		if [ "$?" -ne 0 ]
		then
			abort "ERROR: mounting $stratum: cannot create directory at $dst"
		fi
	elif [ -f "$src" ]
	then
		mkdir -p "$(dirname "$dst")" && touch "$dst"
		if [ "$?" -ne 0 ]
		then
			abort "ERROR: mounting $stratum: cannot touch file at $dst"
		fi
	elif [ -f "$dst" ]
	then
		mkdir -p "$(dirname "$src")" && touch "$src"
		if [ "$?" -ne 0 ]
		then
			abort "ERROR: mounting $stratum: cannot touch file at $src"
		fi
	else
		abort "ERROR: mounting $stratum: unable to mount $src -> $dst, ensure both locations exist"
	fi
}

mount_stratum() {
	stratum="$1"
	echo -n "$indent"
	echo -n "Mounting $stratum... "

	if [ "$(bri -a init)" = "$(bri -a "$stratum")" ]
	then
		stratum_root=""
	else
		stratum_root="/bedrock/strata/$stratum"
	fi

	if [ "$(bri -a global)" = "$(bri -a init)" ]
	then
		global_root=""
	else
		global_root="/bedrock/strata/$(bri -a global)"
	fi

IFS="
"
	for missing_mount in $(bri -M $stratum | awk '/expected share.$/{print$1}')
	do
		dst="$stratum_root$missing_mount"
		src="$global_root$missing_mount"
		for cfg_mount in $(bri -c $stratum share)
		do
			if [ -e "$stratum_root$cfg_mount" ] && [ "$(realpath "$stratum_root$cfg_mount")" = "$dst" ]
			then
				src="$global_root$cfg_mount"
				break
			fi 2>/dev/null
		done
		ensure_mounts_exist "$stratum" "$src" "$dst"
		# ensure is a mount point (so we can make shared)
		if awk -v"mount=$src" '$5 == mount {exit 1}' /proc/1/mountinfo
		then
			mount --bind "$src" "$src"
		fi
		mount --make-rshared "$src"
		mount --rbind "$src" "$dst"
	done
	for missing_mount in $(bri -M $stratum | awk '/expected bind.$/{print$1}')
	do
		dst="$stratum_root$missing_mount"
		src="$global_root$missing_mount"
		for cfg_mount in $(bri -c $stratum bind)
		do
			if [ -e "$stratum_root$cfg_mount" ] && [ "$(realpath "$stratum_root$cfg_mount")" = "$dst" ]
			then
				src="$global_root$cfg_mount"
				break
			fi 2>/dev/null
		done
		ensure_mounts_exist "$stratum" "$src" "$dst"
		mount --bind "$src" "$dst"
		mount --make-private "$dst"
	done
	# union has to be after bind so init-bind /etc can be available
	for missing_mount in $(bri -M $stratum | awk '/expected union.$/{print$1}')
	do
		dst="$stratum_root$missing_mount"
		src="$global_root$missing_mount"
		for cfg_mount in $(bri -c $stratum union | awk -F: '{print$1}')
		do
			if [ -e "$stratum_root$cfg_mount" ] && [ "$(realpath "$stratum_root$cfg_mount")" = "$dst" ]
			then
				src="$global_root$cfg_mount"
				break
			fi 2>/dev/null
		done
		if ! [ -e "$src" ] && ! mkdir -p "$dst"
		then
			abort "ERROR: mounting $stratum, cannot create directory at $mount"
		fi
		redir_files=$(bri -c $stratum union | grep "^${cfg_mount}:" | cut -d':' -f2- | awk 'BEGIN{FS="([ ,:]|\\t)+";OFS=" /"}{$1=$1;print}')
		eval "/bedrock/sbin/bru $dst $src $redir_files &"
	done

	echo "done"
}

run_config() {
	config="$1"
	stratum="$2"

	echo -n "$indent"
	echo -n "Running $config for $stratum... "

	result=true
	for exe in $(bri -c "$stratum" "$config")
	do
		if ! . $exe "$stratum"
		then
			abort "ERROR: $exe failed for $config for $stratum"
		fi
	done

	echo "done"
}

disable() {
	stratum="$1"

	if [ "$(bri -a "$stratum")" == "$(bri -a init)" ]
	then
		abort "ERROR: enabling/disabling init stratum disallowed"
	elif [ "$(bri -a "$stratum")" == "$(bri -a global)" ]
	then
		abort "ERROR: enabling/disabling global stratum disallowed"
	fi

	echo "Disabling $stratum"
	indent="  "
	run_config predisable $stratum || return 1
	kill_procs $stratum || return 1
	unmount_stratum $stratum || return 1
	run_config postdisable $stratum || return 1

	echo -n "$indent"
	echo -n "Setting $stratum as disabled... "
	if [ -e /bedrock/run/enabled_strata/$stratum ]
	then
		rm /bedrock/run/enabled_strata/$stratum
	fi
	for alias in $(bri -I | awk -v"stratum=$stratum" '$3 == stratum {print$1}')
	do
		rm /bedrock/run/enabled_strata/$alias
	done
	echo "done"

	echo -n "$indent"
	echo -n "Updating brpath... "
	echo 1 > /bedrock/brpath/reparse_config
	echo "done"
}

enable() {
	stratum="$1"

	echo "Enabling $stratum"
	indent="  "

	if [ "${2:-}" != "force" ] && [ "x$(bri -m "$stratum" | grep -v ".unmanaged/okay.$")x" != "xx" ]
	then
		echo ""
		echo "ERROR: $stratum already has mounts, refusing to continue." >&2
		echo "Consider alternative brs command, see \`brs --help\`" >&2
		exit 1
	fi

	run_config preenable $stratum || return 1
	mount_stratum $stratum || return 1
	run_config postenable $stratum || return 1

	echo -n "$indent"
	echo -n "Setting $stratum as enabled... "
	touch /bedrock/run/enabled_strata/$stratum
	for alias in $(bri -I | awk -v"stratum=$stratum" '$3 == stratum {print$1}')
	do
		ln -fs $stratum /bedrock/run/enabled_strata/$alias
	done
	echo "done"

	echo -n "$indent"
	echo -n "Updating brpath... "
	echo 1 > /bedrock/brpath/reparse_config
	echo "done"
}

fix() {
	for stratum in $(bri -l)
	do
		if [ "$(bri -a init)" = "$(bri -a "$stratum")" ]
		then
			stratum_root=""
		else
			stratum_root="/bedrock/strata/$stratum"
		fi
		for mount in $(bri -m $stratum | awk '/.share\/expected: (union|bind)\/bad.$/{print$1}')
		do
			echo "$stratum_root/$mount was improperly set as shared, fixing"
			mount --make-private "$stratum_root/$mount"
		done
		if [ -n "$(bri -M "$stratum")" ]
		then
			echo "${stratum} is missing mounts, fixing"
			brs update "$stratum"
		fi
	done
}

export PATH=/bedrock/sbin:/bedrock/bin:$PATH

# brs has to run with init local context, as init will see mount points
# differently from any other stratum.  Moreover, init cannot be taken down; this
# slightly lessens concerns related to disabling a stratum while brs is running.
if [ "$(bri -n)" != "$(bri -a init)" ]
then
	exec /bedrock/bin/brc init $0 $@
fi

if [ -z "${1:-}" ]
then
	echo "brs: no command specified.  See \`brs -h\`."
	exit 1
fi

if [ "$1" = "h" ] || [ "$1" = "-h" ] || [ "$1" = "help" ] || [ "$1" = "--help" ]
then
	help
	return 0
fi

action="$1"
if ! bri -a "$2" >/dev/null 2>&1
then
	echo "brs: no such stratum $1"
	return 1
fi
stratum="$(bri a $2)"

indent=""

case "$action" in
	"force-enable")
		enable "$stratum" "force";;
	"enable")
		enable "$stratum";;
	"reenable")
		disable "$stratum" && enable "$stratum";;
	"disable")
		disable "$stratum";;
	"update")
		mount_stratum "$stratum";;
	"mount")
		mount_stratum "$stratum";;
	"unmount"|"umount")
		unmount_stratum "$stratum";;
	"kill")
		kill_procs "$stratum";;
	"preenable")
		run_config preenable "$stratum";;
	"predisable")
		run_config predisable "$stratum";;
	"postenable")
		run_config postenable "$stratum";;
	"postdisable")
		run_config postdisable "$stratum";;
	"fix")
		fix;;
	*)
		echo "brs: invalid command.  See \`brs -h\`."
		exit 1;;
esac
