#!/bedrock/bin/busybox sh
#
# rcK shutdown script
#
#      This program is free software; you can redistribute it and/or
#      modify it under the terms of the GNU General Public License
#      version 2 as published by the Free Software Foundation.
#
# Copyright (c) 2012-2014 Daniel Thau <danthau@bedrocklinux.org>

PATH="/bin:/sbin:/usr/bin:/usr/sbin"

clear
chvt 1

NORMAL='\033[1;0m'
WHITE='\033[1;37m'
GREEN='\033[0;32m'
RED='\033[0;31m'
clear
printf "$WHITE"
cat <<EOF
__          __             __      
\ \_________\ \____________\ \___  
 \  _ \  _\ _  \  _\ __ \ __\   /  
  \___/\__/\__/ \_\ \___/\__/\_\_\ 
       Bedrock Linux 1.0beta1 Hawky
EOF
printf "$NORMAL"

announce(){
	printf "[ -- ] $1"
}
result(){
	if [ $? -eq 0 ]
	then
		printf "\r[${GREEN}OKAY$NORMAL]\n"
	else
		printf "\r[${RED}FAIL$NORMAL]\n"
	fi
}

announce "Running client shutdown scripts... "
sh /etc/init.d/rcK.clients
result

announce "Killing all running processes... "
for i in 1 2 3 4 5 6 7 8 9 10
do
	killall5 -15
done
for i in 1 2 3 4 5 6 7 8 9 10
do
	killall5 -9
done
# the below check claims "FAILED" when they should have succeeded - this needs
# more work.  it is probably the *check* that is bad, not the killall5's, but
# both should be examined in more detail.
## if any thing is left running that isn't:
## - a kernel process
## - init (ie, PID1)
## - rcK (ie, PID$$)
## - [, ps, awk, grep or wc (ie, five additional PID's)
## the above killall5's have failed
#if [ $(ps | awk '$NF !~ /^\[.*\]$/&&NR>1{print$1}' | grep -v "^\(1\|$$\)$" | wc -l) -gt 5 ]
#then
#	/bin/false; result
#else
#	/bin/true; result
#fi
/bin/true; result

announce "Saving PRNG..."
if [ -f /proc/sys/kernel/random/poolsize ]
then
	POOLSIZE=$(cat /proc/sys/kernel/random/poolsize)
else
	POOLSIZE=512
fi
dd if=/dev/urandom of=/var/lib/urandom/random-seed bs=$POOLSIZE count=1 2>/dev/null
result

announce "Cleaning temporary files..."
RESULT=/bin/true
find /tmp -mindepth 1 -exec rm -rf {} \; 2>/dev/null
if [ "$(ls -A /tmp)" != "" ]
then
	RESULT=/bin/false
fi
eval $RESULT
result

announce "Unmounting all filesystems..."
RESULT=/bin/true
# Try to unmount everything except:
# - proc (as proc is needed to get mount information).
# - /dev (problematic but since it is a tmpfs it wouldn't have anything synced)
# - / (as it should be last, after proc)
# If some things failed to unmount, it could be because they had other things
# bind-mounted into them.  Keep looping until we've found we're no longer
# making progress with unmounting.
MOUNT_COUNT=$(expr $(cat /proc/mounts | wc -l) + 1)
MOUNT_DIGITS="$(printf $MOUNT_COUNT | wc -c)"
while [ "$(cat /proc/mounts | wc -l)" -lt "$MOUNT_COUNT" ]
do
	MOUNT_COUNT=$(cat /proc/mounts | wc -l)
	for MOUNT in $(cat /proc/mounts | awk '$2 != "/proc" && $2 != "/dev" {print $2}' | sort -r)
	do
		umount $MOUNT 2>/dev/null
	done
done
# if some things still fail to unmount, mount as read-only
if [ $(cat /proc/mounts | wc -l) -gt 4 ]
then
	RESULT=/bin/false
	echo ""
	echo "Not all filesystems successfully unmounted, mounting remaining"
        echo "mount points as read-only"
	for MOUNT in $(cat /proc/mounts | awk '$2 != "/proc" && $2 != "/dev" {print $2}' | sort -r)
	do
		echo "Mounting $MOUNT as read-only"
		umount -r $MOUNT 2>/dev/null
	done
fi
eval $RESULT
result
# Unmount /proc, /dev and root directory now that they are no longer needed.
umount /proc
umount /dev
umount /
